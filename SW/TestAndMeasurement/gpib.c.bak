
#include "gpib.h"
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>
#include <avr/interrupt.h>


#define ATN_LOW   DDRF |=  (1<<6)
#define ATN_HIGH  DDRF &= ~(1<<6)
#define NDAC_LOW  DDRC |=  (1<<7)
#define NDAC_HIGH DDRC &= ~(1<<7)
#define NRFD_LOW  DDRC |=  (1<<6)
#define NRFD_HIGH DDRC &= ~(1<<6)
#define DAV_LOW   DDRB |=  (1<<6)
#define DAV_HIGH  DDRB &= ~(1<<6)
#define EOI_LOW   DDRB |=  (1<<4)
#define EOI_HIGH  DDRB &= ~(1<<4)
#define REN_LOW   DDRB |=  (1<<5)
#define REN_HIGH  DDRB &= ~(1<<5)
#define IFC_LOW   DDRE |=  (1<<2)
#define IFC_HIGH  DDRE &= ~(1<<2)



#define DAV_STATE  (PINB & (1<<6))
#define NDAC_STATE (PINC & (1<<7))
#define NRFD_STATE (PINC & (1<<6))
#define ATN_STATE  (PINF & (1<<6))
#define EOI_STATE  (PINB & (1<<4))



uint8_t  volatile timer0_100mscounter;
uint8_t  timer0_div;

void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
	// Overflow Interrupt erlauben
	TIMSK0 |= (1<<TOIE0);
	timer0_div = 0;
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
	timer0_div++;
	if (timer0_div >= 6)
	{
		timer0_100mscounter++;
		timer0_div = 0;
	}
}

static void gpib_recover(void)
{
	gpib_init();
}

void gpib_ren(bool enable)
{
	if (enable)
	{
		REN_LOW; /* remote enable */
	}
	else
	{
		REN_HIGH; /* remote disable */
	}
}


void gpib_init(void)
{
// PB5 = REN
	DDRD  = 0x00;
	PORTD = 0x00;
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
	DDRB  &= ~((1<<4) | (1<<5) | (1<<6));
	PORTC &= ~((1<<6) | (1<<7));
	DDRC  &= ~((1<<6) | (1<<7));
	PORTE &= ~(1<<2);
	DDRE  &= ~(1<<2);
	PORTF &= ~((1<<6) | (1<<7));
	DDRF  &= ~((1<<6) | (1<<7));
	
	DDRB |= (1<<5); /* remote enable */
	
	timer_init(); /* init timeout timer */
	
	gpib_interface_clear();
}

void gpib_interface_clear(void)
{
	IFC_LOW; /* interface clear */
	_delay_ms(100);
	IFC_HIGH; /* interface clear */
	_delay_ms(10);
}

bool gpib_tx(uint8_t dat, bool iscommand, gpibtimeout_t ptimeoutfunc)
{
	uint8_t tmp;
	bool timedout;
	
	NDAC_HIGH;   /* make NDAC H */
	
	if (iscommand)
		ATN_LOW; /* make ATN L */
	else
		ATN_HIGH; /* make ATN H */
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		timedout = ptimeoutfunc();
	}
	while ( (NRFD_STATE != 0) && !timedout); /* wait until ready for data */

	if (!timedout)
	{
		DDRD = dat;
	
		DAV_LOW;
		do
		{
			timedout = ptimeoutfunc();
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
		DAV_HIGH;
	
		DDRD = 0x00;
	}
	
	if (timedout)
	{
		gpib_recover();
	}
	return timedout;
}

bool gpib_dat(uint8_t dat, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(dat, false, ptimeoutfunc);
}


bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(addr | 0x20, true, ptimeoutfunc);
}

bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(addr | 0x40, true, ptimeoutfunc);
}

bool gpib_cmd_UNL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
}

bool gpib_cmd_DCL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x14, true, ptimeoutfunc);
}

bool gpib_cmd_SDC(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x04, true, ptimeoutfunc);
}


uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	uint8_t c;
	bool eoi, received, timedout;	
	
	c = 0;
	eoi = false;
	received = false;

	do
	{
	
		if ( DAV_STATE == 0 )
		{
		
			NRFD_LOW;
			c = ~PIND;
			NDAC_HIGH;
			if ( EOI_STATE == 0 ) /* is EOI LOW?*/
			{
				eoi = true;
			}
			
			NDAC_LOW;
			NRFD_HIGH;
			_delay_us(1);
			
			received = true;
		}
		timedout = ptimeoutfunc();
	}
	while (!received && !timedout);
	*pEoi = eoi;
	if (timedout)
	{
		gpib_recover();
	}
	*ptimedout = timedout;
	return c;
};

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
	ATN_HIGH; /* make ATN H */	
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
		gpib_recover();
	return timedout;
}

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
		
	ATN_HIGH;    /* make ATN H */
	
	if (timedout)
		gpib_recover();
	return timedout;
}


bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_dat(dat, ptimeoutfunc);
	EOI_HIGH;    /* make EOI H */
	return timedout;
}


#if 1

uint16_t timeout_val;

void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
}

bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
		
	timeout_val--;
	return false;
}

uint8_t gpib_search(void)
{
	uint8_t addr, foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
	
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
		timeout_start(500);
		gpib_tx(addr | 0x20, true, is_timedout); // LAG
		ATN_HIGH; /* make ATN H */
		_delay_ms(2);
		
		if ( NDAC_STATE == 0 )
		{
			foundaddr = addr;
		}
		
		
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
		
	}
	while ( (addr < 31) && (foundaddr == 255));
		
	return foundaddr;
}
#endif
