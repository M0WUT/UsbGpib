
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000021a0  00002234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  0080011c  0080011c  00002250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000777c  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f2c  00000000  00000000  00009db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004348  00000000  00000000  0000bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  00010028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000258b  00000000  00000000  00010b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d83  00000000  00000000  000130d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  00017e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_10>
      2c:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__vector_11>
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_23>
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c0       	rjmp	.+186    	; 0x14c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 02 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	00 00 00 00 00 00 00                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01 00                                            ...

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	da e0       	ldi	r29, 0x0A	; 10
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e0 ea       	ldi	r30, 0xA0	; 160
     128:	f1 e2       	ldi	r31, 0x21	; 33
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ac 31       	cpi	r26, 0x1C	; 28
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	ac e1       	ldi	r26, 0x1C	; 28
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	ab 3e       	cpi	r26, 0xEB	; 235
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	96 d7       	rcall	.+3884   	; 0x1074 <main>
     148:	0c 94 ce 10 	jmp	0x219c	; 0x219c <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <TMC_SetInternalSerial>:

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     14e:	4f e5       	ldi	r20, 0x5F	; 95
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	af b7       	in	r26, 0x3f	; 63
     154:	f8 94       	cli
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tmc_serial_string+0x1>
     15c:	88 23       	and	r24, r24
     15e:	b1 f1       	breq	.+108    	; 0x1cc <TMC_SetInternalSerial+0x7e>
     160:	87 e4       	ldi	r24, 0x47	; 71
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmc_serial_string+0x3>
     168:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string+0x2>
     16c:	80 e5       	ldi	r24, 0x50	; 80
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x5>
     174:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x4>
     178:	89 e4       	ldi	r24, 0x49	; 73
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x7>
     180:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string+0x6>
     184:	82 e4       	ldi	r24, 0x42	; 66
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <tmc_serial_string+0x9>
     18c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <tmc_serial_string+0x8>
     190:	50 93 83 01 	sts	0x0183, r21	; 0x800183 <tmc_serial_string+0xb>
     194:	40 93 82 01 	sts	0x0182, r20	; 0x800182 <tmc_serial_string+0xa>
     198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     19c:	6a e0       	ldi	r22, 0x0A	; 10
     19e:	0e 94 a3 10 	call	0x2146	; 0x2146 <__udivmodqi4>
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	20 5d       	subi	r18, 0xD0	; 208
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	30 93 85 01 	sts	0x0185, r19	; 0x800185 <tmc_serial_string+0xd>
     1ae:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <tmc_serial_string+0xc>
     1b2:	89 2f       	mov	r24, r25
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	c0 96       	adiw	r24, 0x30	; 48
     1b8:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tmc_serial_string+0xf>
     1bc:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tmc_serial_string+0xe>
     1c0:	50 93 89 01 	sts	0x0189, r21	; 0x800189 <tmc_serial_string+0x11>
     1c4:	40 93 88 01 	sts	0x0188, r20	; 0x800188 <tmc_serial_string+0x10>
     1c8:	88 e0       	ldi	r24, 0x08	; 8
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <TMC_SetInternalSerial+0x80>
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	6e e0       	ldi	r22, 0x0E	; 14
     1d2:	71 e2       	ldi	r23, 0x21	; 33
     1d4:	28 2f       	mov	r18, r24
     1d6:	29 0f       	add	r18, r25
     1d8:	e6 2f       	mov	r30, r22
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     1e0:	e4 91       	lpm	r30, Z
     1e2:	90 ff       	sbrs	r25, 0
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <TMC_SetInternalSerial+0x9e>
     1e6:	e2 95       	swap	r30
     1e8:	ef 70       	andi	r30, 0x0F	; 15
     1ea:	6f 5f       	subi	r22, 0xFF	; 255
     1ec:	ef 70       	andi	r30, 0x0F	; 15
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	4e 2f       	mov	r20, r30
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	ea 30       	cpi	r30, 0x0A	; 10
     1f6:	18 f0       	brcs	.+6      	; 0x1fe <TMC_SetInternalSerial+0xb0>
     1f8:	49 5c       	subi	r20, 0xC9	; 201
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <TMC_SetInternalSerial+0xb4>
     1fe:	40 5d       	subi	r20, 0xD0	; 208
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	f9 01       	movw	r30, r18
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	e6 58       	subi	r30, 0x86	; 134
     20a:	fe 4f       	sbci	r31, 0xFE	; 254
     20c:	51 83       	std	Z+1, r21	; 0x01
     20e:	40 83       	st	Z, r20
     210:	9f 5f       	subi	r25, 0xFF	; 255
     212:	94 31       	cpi	r25, 0x14	; 20
     214:	f9 f6       	brne	.-66     	; 0x1d4 <TMC_SetInternalSerial+0x86>
     216:	8b 5e       	subi	r24, 0xEB	; 235
     218:	88 0f       	add	r24, r24
     21a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmc_serial_string>
     21e:	af bf       	out	0x3f, r26	; 63
     220:	08 95       	ret

00000222 <is_timedout>:
     222:	85 e3       	ldi	r24, 0x35	; 53
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <is_timedout+0x2>
     228:	00 00       	nop
     22a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     22e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     232:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     236:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	a1 05       	cpc	r26, r1
     23e:	b1 05       	cpc	r27, r1
     240:	69 f0       	breq	.+26     	; 0x25c <is_timedout+0x3a>
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	a1 09       	sbc	r26, r1
     246:	b1 09       	sbc	r27, r1
     248:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     24c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     250:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     254:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	08 95       	ret

00000260 <tmc_gpib_write_timedout>:
     260:	0e 94 89 10 	call	0x2112	; 0x2112 <USB_USBTask>
     264:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     268:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     26c:	89 2b       	or	r24, r25
     26e:	08 95       	ret

00000270 <tmc_gpib_read_timedout>:
     270:	0e 94 89 10 	call	0x2112	; 0x2112 <USB_USBTask>
     274:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <IsTMCBulkINReset>
     278:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     27c:	89 2b       	or	r24, r25
     27e:	08 95       	ret

00000280 <Jump_To_Bootloader>:
     280:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <USB_Disable>
     284:	f8 94       	cli
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	87 ea       	ldi	r24, 0xA7	; 167
     28a:	91 e6       	ldi	r25, 0x61	; 97
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <Jump_To_Bootloader+0xc>
     294:	00 c0       	rjmp	.+0      	; 0x296 <Jump_To_Bootloader+0x16>
     296:	00 00       	nop
     298:	9c e0       	ldi	r25, 0x0C	; 12
     29a:	88 e1       	ldi	r24, 0x18	; 24
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	a8 95       	wdr
     2a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     2ac:	ef ef       	ldi	r30, 0xFF	; 255
     2ae:	f9 e6       	ldi	r31, 0x69	; 105
     2b0:	28 e1       	ldi	r18, 0x18	; 24
     2b2:	e1 50       	subi	r30, 0x01	; 1
     2b4:	f0 40       	sbci	r31, 0x00	; 0
     2b6:	20 40       	sbci	r18, 0x00	; 0
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <Jump_To_Bootloader+0x32>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <Jump_To_Bootloader+0x3c>
     2bc:	00 00       	nop
     2be:	e0 e0       	ldi	r30, 0x00	; 0
     2c0:	f0 e7       	ldi	r31, 0x70	; 112
     2c2:	09 95       	icall
     2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <Jump_To_Bootloader+0x44>

000002c6 <findGpibdevice>:
	bool devicepresent;
	
	//gpib_interface_clear();
	
	devicepresent = false;
	addr = gpib_search();
     2c6:	0e 94 18 0b 	call	0x1630	; 0x1630 <gpib_search>
	devicepresent = (addr < 255);
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <findGpibdevice+0xe>
     2d0:	90 e0       	ldi	r25, 0x00	; 0
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
	gpib_addr = addr; /* set global GPIB address to found address*/
     2d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpib_addr>
	
	return devicepresent;
}
     2d8:	89 2f       	mov	r24, r25
     2da:	08 95       	ret

000002dc <identifyGpibDevice>:

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <identifyGpibDevice+0xc>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;
     2ec:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <tmc_serial_string>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     2f0:	80 ea       	ldi	r24, 0xA0	; 160
     2f2:	96 e8       	ldi	r25, 0x86	; 134
     2f4:	a1 e0       	ldi	r26, 0x01	; 1
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     2fc:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     300:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     304:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
     308:	61 e1       	ldi	r22, 0x11	; 17
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     310:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <gpib_make_listener>
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     314:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     318:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     31c:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     320:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     324:	89 2b       	or	r24, r25
     326:	8a 2b       	or	r24, r26
     328:	8b 2b       	or	r24, r27
     32a:	31 f0       	breq	.+12     	; 0x338 <identifyGpibDevice+0x5c>
     32c:	41 e1       	ldi	r20, 0x11	; 17
     32e:	51 e0       	ldi	r21, 0x01	; 1
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	8a e2       	ldi	r24, 0x2A	; 42
     334:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     338:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     33c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     340:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     344:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     348:	89 2b       	or	r24, r25
     34a:	8a 2b       	or	r24, r26
     34c:	8b 2b       	or	r24, r27
     34e:	31 f0       	breq	.+12     	; 0x35c <identifyGpibDevice+0x80>
     350:	41 e1       	ldi	r20, 0x11	; 17
     352:	51 e0       	ldi	r21, 0x01	; 1
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	89 e4       	ldi	r24, 0x49	; 73
     358:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     35c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     360:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     364:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     368:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     36c:	89 2b       	or	r24, r25
     36e:	8a 2b       	or	r24, r26
     370:	8b 2b       	or	r24, r27
     372:	31 f0       	breq	.+12     	; 0x380 <identifyGpibDevice+0xa4>
     374:	41 e1       	ldi	r20, 0x11	; 17
     376:	51 e0       	ldi	r21, 0x01	; 1
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	84 e4       	ldi	r24, 0x44	; 68
     37c:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
     380:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     384:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     388:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     38c:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     390:	89 2b       	or	r24, r25
     392:	8a 2b       	or	r24, r26
     394:	8b 2b       	or	r24, r27
     396:	31 f0       	breq	.+12     	; 0x3a4 <identifyGpibDevice+0xc8>
     398:	41 e1       	ldi	r20, 0x11	; 17
     39a:	51 e0       	ldi	r21, 0x01	; 1
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	8e e4       	ldi	r24, 0x4E	; 78
     3a0:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     3a4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     3a8:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     3ac:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     3b0:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     3b4:	89 2b       	or	r24, r25
     3b6:	8a 2b       	or	r24, r26
     3b8:	8b 2b       	or	r24, r27
     3ba:	31 f0       	breq	.+12     	; 0x3c8 <identifyGpibDevice+0xec>
     3bc:	41 e1       	ldi	r20, 0x11	; 17
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	8f e3       	ldi	r24, 0x3F	; 63
     3c4:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     3c8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     3cc:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     3d0:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     3d4:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     3d8:	89 2b       	or	r24, r25
     3da:	8a 2b       	or	r24, r26
     3dc:	8b 2b       	or	r24, r27
     3de:	31 f0       	breq	.+12     	; 0x3ec <identifyGpibDevice+0x110>
     3e0:	41 e1       	ldi	r20, 0x11	; 17
     3e2:	51 e0       	ldi	r21, 0x01	; 1
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
     3e8:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
	gpib_untalk_unlisten(is_timedout);
     3ec:	81 e1       	ldi	r24, 0x11	; 17
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpib_untalk_unlisten>
	
	if (timeout_val != 0) 
     3f4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     3f8:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     3fc:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     400:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     404:	89 2b       	or	r24, r25
     406:	8a 2b       	or	r24, r26
     408:	8b 2b       	or	r24, r27
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	6e c1       	rjmp	.+732    	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     40e:	80 ea       	ldi	r24, 0xA0	; 160
     410:	96 e8       	ldi	r25, 0x86	; 134
     412:	a1 e0       	ldi	r26, 0x01	; 1
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     41a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     41e:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     422:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
	gpib_untalk_unlisten(is_timedout);
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
     426:	61 e1       	ldi	r22, 0x11	; 17
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     42e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <gpib_make_talker>
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */
     432:	f1 2c       	mov	r15, r1
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
		len = 0;
     434:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			c = gpib_readdat(&eoi, &timedout, is_timedout);
     436:	41 e1       	ldi	r20, 0x11	; 17
     438:	51 e0       	ldi	r21, 0x01	; 1
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	ce 01       	movw	r24, r28
     442:	02 96       	adiw	r24, 0x02	; 2
     444:	0e 94 45 0a 	call	0x148a	; 0x148a <gpib_readdat>
			hascomma = hascomma || (c == ',');
     448:	01 e0       	ldi	r16, 0x01	; 1
     44a:	f1 10       	cpse	r15, r1
     44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44e:	8c 32       	cpi	r24, 0x2C	; 44
     450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	f0 2e       	mov	r15, r16
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     456:	98 2f       	mov	r25, r24
     458:	9f 7e       	andi	r25, 0xEF	; 239
     45a:	9a 32       	cpi	r25, 0x2A	; 42
     45c:	61 f0       	breq	.+24     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     45e:	9f 32       	cpi	r25, 0x2F	; 47
     460:	51 f0       	breq	.+20     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     462:	8c 35       	cpi	r24, 0x5C	; 92
     464:	41 f0       	breq	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     466:	98 2f       	mov	r25, r24
     468:	9d 7f       	andi	r25, 0xFD	; 253
     46a:	90 32       	cpi	r25, 0x20	; 32
     46c:	21 f0       	breq	.+8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46e:	8c 32       	cpi	r24, 0x2C	; 44
     470:	11 f0       	breq	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	86 32       	cpi	r24, 0x26	; 38
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				c='_';
     476:	8f e5       	ldi	r24, 0x5F	; 95
			if ( (c >=32) && (c <=126))
     478:	90 ee       	ldi	r25, 0xE0	; 224
     47a:	98 0f       	add	r25, r24
     47c:	9f 35       	cpi	r25, 0x5F	; 95
     47e:	50 f4       	brcc	.+20     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     480:	e1 2f       	mov	r30, r17
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	ee 0f       	add	r30, r30
     486:	ff 1f       	adc	r31, r31
     488:	e6 58       	subi	r30, 0x86	; 134
     48a:	fe 4f       	sbci	r31, 0xFE	; 254
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
     492:	1f 5f       	subi	r17, 0xFF	; 255
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     494:	12 33       	cpi	r17, 0x32	; 50
     496:	50 f4       	brcc	.+20     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	81 11       	cpse	r24, r1
     49c:	07 c0       	rjmp	.+14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	88 23       	and	r24, r24
     4a2:	49 f2       	breq	.-110    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     4a6:	12 30       	cpi	r17, 0x02	; 2
     4a8:	60 f0       	brcs	.+24     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			len--;
     4aa:	11 50       	subi	r17, 0x01	; 1
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     4ac:	e1 2f       	mov	r30, r17
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	e8 58       	subi	r30, 0x88	; 136
     4b6:	fe 4f       	sbci	r31, 0xFE	; 254
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	8f 35       	cpi	r24, 0x5F	; 95
     4be:	91 05       	cpc	r25, r1
     4c0:	91 f3       	breq	.-28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	81 0f       	add	r24, r17
     4c6:	88 0f       	add	r24, r24
     4c8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     4cc:	81 e1       	ldi	r24, 0x11	; 17
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     4d4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     4d8:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     4dc:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     4e0:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     4e4:	89 2b       	or	r24, r25
     4e6:	8a 2b       	or	r24, r26
     4e8:	8b 2b       	or	r24, r27
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	11 11       	cpse	r17, r1
     4ee:	01 c1       	rjmp	.+514    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     4f0:	80 ea       	ldi	r24, 0xA0	; 160
     4f2:	96 e8       	ldi	r25, 0x86	; 134
     4f4:	a1 e0       	ldi	r26, 0x01	; 1
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     4fc:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     500:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     504:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
		gpib_untalk_unlisten(is_timedout);
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
		{ /* so try out ID? query */
			timeout_start(100000); /* 1s timeout*/
			gpib_make_listener(gpib_addr, is_timedout);
     508:	61 e1       	ldi	r22, 0x11	; 17
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     510:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <gpib_make_listener>
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     514:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     518:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     51c:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     520:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     524:	89 2b       	or	r24, r25
     526:	8a 2b       	or	r24, r26
     528:	8b 2b       	or	r24, r27
     52a:	31 f0       	breq	.+12     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     52c:	41 e1       	ldi	r20, 0x11	; 17
     52e:	51 e0       	ldi	r21, 0x01	; 1
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	89 e4       	ldi	r24, 0x49	; 73
     534:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     538:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     53c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     540:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     544:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     548:	89 2b       	or	r24, r25
     54a:	8a 2b       	or	r24, r26
     54c:	8b 2b       	or	r24, r27
     54e:	31 f0       	breq	.+12     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     550:	41 e1       	ldi	r20, 0x11	; 17
     552:	51 e0       	ldi	r21, 0x01	; 1
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	84 e4       	ldi	r24, 0x44	; 68
     558:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     55c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     560:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     564:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     568:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     56c:	89 2b       	or	r24, r25
     56e:	8a 2b       	or	r24, r26
     570:	8b 2b       	or	r24, r27
     572:	31 f0       	breq	.+12     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     574:	41 e1       	ldi	r20, 0x11	; 17
     576:	51 e0       	ldi	r21, 0x01	; 1
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	8f e3       	ldi	r24, 0x3F	; 63
     57c:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     580:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     584:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     588:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     58c:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     590:	89 2b       	or	r24, r25
     592:	8a 2b       	or	r24, r26
     594:	8b 2b       	or	r24, r27
     596:	31 f0       	breq	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     598:	41 e1       	ldi	r20, 0x11	; 17
     59a:	51 e0       	ldi	r21, 0x01	; 1
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	8a e0       	ldi	r24, 0x0A	; 10
     5a0:	0e 94 12 0b 	call	0x1624	; 0x1624 <gpib_writedat>
			gpib_untalk_unlisten(is_timedout);
     5a4:	81 e1       	ldi	r24, 0x11	; 17
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	ed d7       	rcall	.+4058   	; 0x1584 <gpib_untalk_unlisten>
			if (timeout_val != 0) 
     5aa:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timeout_val>
     5ae:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timeout_val+0x1>
     5b2:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <timeout_val+0x2>
     5b6:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <timeout_val+0x3>
     5ba:	89 2b       	or	r24, r25
     5bc:	8a 2b       	or	r24, r26
     5be:	8b 2b       	or	r24, r27
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5c2:	91 c0       	rjmp	.+290    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     5c4:	80 ea       	ldi	r24, 0xA0	; 160
     5c6:	96 e8       	ldi	r25, 0x86	; 134
     5c8:	a1 e0       	ldi	r26, 0x01	; 1
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     5d0:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     5d4:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     5d8:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
			gpib_untalk_unlisten(is_timedout);
			if (timeout_val != 0) 
			{
				timeout_start(100000); /* 1s timeout*/
				gpib_make_talker(gpib_addr, is_timedout);
     5dc:	61 e1       	ldi	r22, 0x11	; 17
     5de:	71 e0       	ldi	r23, 0x01	; 1
     5e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     5e4:	e3 d7       	rcall	.+4038   	; 0x15ac <gpib_make_talker>
				len = 0;
     5e6:	10 e0       	ldi	r17, 0x00	; 0
				do
				{
					c = gpib_readdat(&eoi, &timedout, is_timedout);
     5e8:	41 e1       	ldi	r20, 0x11	; 17
     5ea:	51 e0       	ldi	r21, 0x01	; 1
     5ec:	be 01       	movw	r22, r28
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	ce 01       	movw	r24, r28
     5f4:	02 96       	adiw	r24, 0x02	; 2
     5f6:	49 d7       	rcall	.+3730   	; 0x148a <gpib_readdat>
					hascomma = hascomma || (c == ',');
     5f8:	01 e0       	ldi	r16, 0x01	; 1
     5fa:	f1 10       	cpse	r15, r1
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5fe:	8c 32       	cpi	r24, 0x2C	; 44
     600:	09 f0       	breq	.+2      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     602:	00 e0       	ldi	r16, 0x00	; 0
     604:	f0 2e       	mov	r15, r16
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
     606:	98 2f       	mov	r25, r24
     608:	9f 7e       	andi	r25, 0xEF	; 239
     60a:	9a 32       	cpi	r25, 0x2A	; 42
     60c:	61 f0       	breq	.+24     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     60e:	9f 32       	cpi	r25, 0x2F	; 47
     610:	51 f0       	breq	.+20     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     612:	8c 35       	cpi	r24, 0x5C	; 92
     614:	41 f0       	breq	.+16     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     616:	98 2f       	mov	r25, r24
     618:	9d 7f       	andi	r25, 0xFD	; 253
     61a:	90 32       	cpi	r25, 0x20	; 32
     61c:	21 f0       	breq	.+8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     61e:	8c 32       	cpi	r24, 0x2C	; 44
     620:	11 f0       	breq	.+4      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     622:	86 32       	cpi	r24, 0x26	; 38
     624:	09 f4       	brne	.+2      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
						c='_';
     626:	8f e5       	ldi	r24, 0x5F	; 95
					if ( (c >=32) && (c <=126) )
     628:	90 ee       	ldi	r25, 0xE0	; 224
     62a:	98 0f       	add	r25, r24
     62c:	9f 35       	cpi	r25, 0x5F	; 95
     62e:	58 f4       	brcc	.+22     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     630:	e1 2f       	mov	r30, r17
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	e6 58       	subi	r30, 0x86	; 134
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	31 83       	std	Z+1, r19	; 0x01
     642:	20 83       	st	Z, r18
     644:	1f 5f       	subi	r17, 0xFF	; 255
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
     646:	12 33       	cpi	r17, 0x32	; 50
     648:	70 f4       	brcc	.+28     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     64a:	99 81       	ldd	r25, Y+1	; 0x01
     64c:	91 11       	cpse	r25, r1
     64e:	0b c0       	rjmp	.+22     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	91 11       	cpse	r25, r1
     654:	08 c0       	rjmp	.+16     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     656:	8d 30       	cpi	r24, 0x0D	; 13
     658:	31 f0       	breq	.+12     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     65a:	8a 30       	cpi	r24, 0x0A	; 10
     65c:	29 f6       	brne	.-118    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     65e:	03 c0       	rjmp	.+6      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     660:	12 30       	cpi	r17, 0x02	; 2
     662:	60 f0       	brcs	.+24     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
					len--;
     664:	11 50       	subi	r17, 0x01	; 1
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     666:	e1 2f       	mov	r30, r17
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ee 0f       	add	r30, r30
     66c:	ff 1f       	adc	r31, r31
     66e:	e8 58       	subi	r30, 0x88	; 136
     670:	fe 4f       	sbci	r31, 0xFE	; 254
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	8f 35       	cpi	r24, 0x5F	; 95
     678:	91 05       	cpc	r25, r1
     67a:	91 f3       	breq	.-28     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
					len--;
				tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	81 0f       	add	r24, r17
     680:	88 0f       	add	r24, r24
     682:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmc_serial_string>
				gpib_untalk_unlisten(is_timedout);
     686:	81 e1       	ldi	r24, 0x11	; 17
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	7c d7       	rcall	.+3832   	; 0x1584 <gpib_untalk_unlisten>
			}				
		}
		
		
		if (!hascomma)
     68c:	01 11       	cpse	r16, r1
     68e:	18 c0       	rjmp	.+48     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
			if ( (tmc_serial_string.UnicodeString[0] = 'H') &&
     690:	88 e4       	ldi	r24, 0x48	; 72
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmc_serial_string+0x3>
     698:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string+0x2>
				 (tmc_serial_string.UnicodeString[1] = 'P') &&
     69c:	80 e5       	ldi	r24, 0x50	; 80
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x5>
     6a4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x4>
     6a8:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <tmc_serial_string+0x6>
     6ac:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <tmc_serial_string+0x7>
     6b0:	20 53       	subi	r18, 0x30	; 48
     6b2:	31 09       	sbc	r19, r1
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	2a 30       	cpi	r18, 0x0A	; 10
     6b8:	31 05       	cpc	r19, r1
     6ba:	18 f0       	brcs	.+6      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
			{
				hascomma = true;
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     6c2:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <timeout_val>
     6c6:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <timeout_val+0x1>
     6ca:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <timeout_val+0x2>
     6ce:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <timeout_val+0x3>
     6d2:	45 2b       	or	r20, r21
     6d4:	46 2b       	or	r20, r22
     6d6:	47 2b       	or	r20, r23
     6d8:	41 f0       	breq	.+16     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     6da:	11 23       	and	r17, r17
     6dc:	31 f0       	breq	.+12     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     6de:	88 23       	and	r24, r24
     6e0:	21 f0       	breq	.+8      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
{
	uint8_t c, len, hascomma;
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
     6e2:	11 e0       	ldi	r17, 0x01	; 1
     6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     6e6:	00 23       	and	r16, r16
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
		{
			TMC_SetInternalSerial(true);
     6e8:	99 f2       	breq	.-90     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	30 dd       	rcall	.-1440   	; 0x14e <TMC_SetInternalSerial>
			gotStringViaGPIB = false;
     6ee:	10 e0       	ldi	r17, 0x00	; 0
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     6f2:	00 23       	and	r16, r16
     6f4:	69 f2       	breq	.-102    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		gotStringViaGPIB = false;
	}
	
	//TMC_SetInternalSerial(false);
	
	gpib_ren(false);
     6f6:	f5 cf       	rjmp	.-22     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	f2 d5       	rcall	.+3044   	; 0x12e0 <gpib_ren>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	81 ee       	ldi	r24, 0xE1	; 225
     700:	94 e0       	ldi	r25, 0x04	; 4
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
	_delay_ms(100);
	gpib_ren(true);
     70c:	00 00       	nop
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	e7 d5       	rcall	.+3022   	; 0x12e0 <gpib_ren>
	return gotStringViaGPIB;
}
     712:	81 2f       	mov	r24, r17
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	08 95       	ret

00000724 <check_bootloaderEntry>:
	SetGlobalInterruptMask(CurrentGlobalInt);
}

void check_bootloaderEntry(void)
{
	if ( !(PINB & (1<<2)) ) /* check if PB2 is LOW*/
     724:	1a 9b       	sbis	0x03, 2	; 3
	{
		Jump_To_Bootloader();
     726:	ac cd       	rjmp	.-1192   	; 0x280 <Jump_To_Bootloader>
     728:	08 95       	ret

0000072a <eeprom_update_if_changed>:
	}
}

void eeprom_update_if_changed(uint16_t addr, uint8_t value)
{
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	ec 01       	movw	r28, r24
     732:	16 2f       	mov	r17, r22
	uint8_t oldval;
	eeprom_busy_wait();
     734:	f9 99       	sbic	0x1f, 1	; 31
     736:	fe cf       	rjmp	.-4      	; 0x734 <eeprom_update_if_changed+0xa>
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     738:	ce 01       	movw	r24, r28
     73a:	0e 94 b8 10 	call	0x2170	; 0x2170 <eeprom_read_byte>
	if (oldval != value)
     73e:	81 17       	cp	r24, r17
     740:	49 f0       	breq	.+18     	; 0x754 <eeprom_update_if_changed+0x2a>
	{
		eeprom_busy_wait();
     742:	f9 99       	sbic	0x1f, 1	; 31
     744:	fe cf       	rjmp	.-4      	; 0x742 <eeprom_update_if_changed+0x18>
		eeprom_write_byte((uint8_t*)addr, value);		
     746:	61 2f       	mov	r22, r17
     748:	ce 01       	movw	r24, r28
	}
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
	eeprom_busy_wait();
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
	if (oldval != value)
	{
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*)addr, value);		
     750:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <eeprom_write_byte>
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     75c:	84 b7       	in	r24, 0x34	; 52
     75e:	87 7f       	andi	r24, 0xF7	; 247
     760:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	a8 95       	wdr
     768:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     76c:	88 61       	ori	r24, 0x18	; 24
     76e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     772:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     776:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	80 e8       	ldi	r24, 0x80	; 128
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     784:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     788:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
     78a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <USB_Init>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     78e:	e0 ee       	ldi	r30, 0xE0	; 224
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	81 60       	ori	r24, 0x01	; 1
     796:	80 83       	st	Z, r24
	USB_Detach();

	
	/* update the TMC default serial number*/
	TMC_SetInternalSerial(false);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	d9 dc       	rcall	.-1614   	; 0x14e <TMC_SetInternalSerial>
	
	/* LED to output and turn on */
	DDRF |= (1<<5);
     79c:	85 9a       	sbi	0x10, 5	; 16
	LED(1);
     79e:	8d 9a       	sbi	0x11, 5	; 17
     7a0:	08 95       	ret

000007a2 <EVENT_USB_Device_Connect>:
     7a2:	08 95       	ret

000007a4 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
     7a4:	08 95       	ret

000007a6 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7a6:	42 e3       	ldi	r20, 0x32	; 50
     7a8:	61 ec       	ldi	r22, 0xC1	; 193
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <Endpoint_ConfigureEndpoint_Prv>
     7b0:	42 e3       	ldi	r20, 0x32	; 50
     7b2:	61 e8       	ldi	r22, 0x81	; 129
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <Endpoint_ConfigureEndpoint_Prv>
     7ba:	42 e3       	ldi	r20, 0x32	; 50
     7bc:	60 e8       	ldi	r22, 0x80	; 128
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <Endpoint_ConfigureEndpoint_Prv>

000007c4 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     7c4:	cf 93       	push	r28
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
	uint8_t btag, statusReg;
	
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     7c6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x4>
     7ca:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x5>
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	29 f4       	brne	.+10     	; 0x7dc <EVENT_USB_Device_ControlRequest+0x18>
     7d2:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     7d6:	80 fd       	sbrc	r24, 0
     7d8:	0b c0       	rjmp	.+22     	; 0x7f0 <EVENT_USB_Device_ControlRequest+0x2c>
     7da:	78 c1       	rjmp	.+752    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
     7dc:	82 38       	cpi	r24, 0x82	; 130
     7de:	91 05       	cpc	r25, r1
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <EVENT_USB_Device_ControlRequest+0x24>
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
     7e2:	03 97       	sbiw	r24, 0x03	; 3
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <EVENT_USB_Device_ControlRequest+0x24>
     7e6:	72 c1       	rjmp	.+740    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
     7e8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     7ec:	81 ff       	sbrs	r24, 1
     7ee:	6e c1       	rjmp	.+732    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     7f0:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_ControlRequest+0x1>
     7f4:	86 30       	cpi	r24, 0x06	; 6
     7f6:	09 f4       	brne	.+2      	; 0x7fa <EVENT_USB_Device_ControlRequest+0x36>
     7f8:	fa c0       	rjmp	.+500    	; 0x9ee <EVENT_USB_Device_ControlRequest+0x22a>
     7fa:	90 f4       	brcc	.+36     	; 0x820 <EVENT_USB_Device_ControlRequest+0x5c>
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	09 f4       	brne	.+2      	; 0x802 <EVENT_USB_Device_ControlRequest+0x3e>
     800:	8a c0       	rjmp	.+276    	; 0x916 <EVENT_USB_Device_ControlRequest+0x152>
     802:	38 f4       	brcc	.+14     	; 0x812 <EVENT_USB_Device_ControlRequest+0x4e>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	09 f4       	brne	.+2      	; 0x80a <EVENT_USB_Device_ControlRequest+0x46>
     808:	57 c0       	rjmp	.+174    	; 0x8b8 <EVENT_USB_Device_ControlRequest+0xf4>
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	09 f4       	brne	.+2      	; 0x810 <EVENT_USB_Device_ControlRequest+0x4c>
     80e:	77 c0       	rjmp	.+238    	; 0x8fe <EVENT_USB_Device_ControlRequest+0x13a>
     810:	5d c1       	rjmp	.+698    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
     812:	84 30       	cpi	r24, 0x04	; 4
     814:	09 f4       	brne	.+2      	; 0x818 <EVENT_USB_Device_ControlRequest+0x54>
     816:	a6 c0       	rjmp	.+332    	; 0x964 <EVENT_USB_Device_ControlRequest+0x1a0>
     818:	85 30       	cpi	r24, 0x05	; 5
     81a:	09 f4       	brne	.+2      	; 0x81e <EVENT_USB_Device_ControlRequest+0x5a>
     81c:	d3 c0       	rjmp	.+422    	; 0x9c4 <EVENT_USB_Device_ControlRequest+0x200>
     81e:	56 c1       	rjmp	.+684    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
     820:	80 38       	cpi	r24, 0x80	; 128
     822:	61 f1       	breq	.+88     	; 0x87c <EVENT_USB_Device_ControlRequest+0xb8>
     824:	08 f5       	brcc	.+66     	; 0x868 <EVENT_USB_Device_ControlRequest+0xa4>
     826:	87 30       	cpi	r24, 0x07	; 7
     828:	09 f4       	brne	.+2      	; 0x82c <EVENT_USB_Device_ControlRequest+0x68>
     82a:	03 c1       	rjmp	.+518    	; 0xa32 <EVENT_USB_Device_ControlRequest+0x26e>
     82c:	80 34       	cpi	r24, 0x40	; 64
     82e:	09 f0       	breq	.+2      	; 0x832 <EVENT_USB_Device_ControlRequest+0x6e>
     830:	4d c1       	rjmp	.+666    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     836:	87 7f       	andi	r24, 0xF7	; 247
     838:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     842:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     846:	8e 77       	andi	r24, 0x7E	; 126
     848:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearSETUP();

				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     84c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <Endpoint_ClearStatusStage>
				
				LED(0);
     850:	8d 98       	cbi	0x11, 5	; 17
     852:	2f ef       	ldi	r18, 0xFF	; 255
     854:	84 e3       	ldi	r24, 0x34	; 52
     856:	9c e0       	ldi	r25, 0x0C	; 12
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	80 40       	sbci	r24, 0x00	; 0
     85c:	90 40       	sbci	r25, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <EVENT_USB_Device_ControlRequest+0x94>
     860:	00 c0       	rjmp	.+0      	; 0x862 <EVENT_USB_Device_ControlRequest+0x9e>
     862:	00 00       	nop
				_delay_ms(250);
				LED(1);
     864:	8d 9a       	sbi	0x11, 5	; 17
     866:	32 c1       	rjmp	.+612    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     868:	81 3a       	cpi	r24, 0xA1	; 161
     86a:	09 f4       	brne	.+2      	; 0x86e <EVENT_USB_Device_ControlRequest+0xaa>
     86c:	0e c1       	rjmp	.+540    	; 0xa8a <EVENT_USB_Device_ControlRequest+0x2c6>
     86e:	82 3a       	cpi	r24, 0xA2	; 162
     870:	09 f4       	brne	.+2      	; 0x874 <EVENT_USB_Device_ControlRequest+0xb0>
     872:	fb c0       	rjmp	.+502    	; 0xa6a <EVENT_USB_Device_ControlRequest+0x2a6>
     874:	80 3a       	cpi	r24, 0xA0	; 160
     876:	09 f0       	breq	.+2      	; 0x87a <EVENT_USB_Device_ControlRequest+0xb6>
     878:	29 c1       	rjmp	.+594    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
     87a:	f0 c0       	rjmp	.+480    	; 0xa5c <EVENT_USB_Device_ControlRequest+0x298>
		{
			case Req_ReadStatusByte:
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;
     87c:	c0 91 e5 01 	lds	r28, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     880:	80 e5       	ldi	r24, 0x50	; 80
     882:	93 ec       	ldi	r25, 0xC3	; 195
     884:	a0 e0       	ldi	r26, 0x00	; 0
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     88c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     890:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     894:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;

				timeout_start(50000); /* 0.5s timeout*/
				statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     898:	61 e1       	ldi	r22, 0x11	; 17
     89a:	71 e0       	ldi	r23, 0x01	; 1
     89c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     8a0:	30 d6       	rcall	.+3168   	; 0x1502 <gpib_readStatusByte>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8a2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8a6:	97 7f       	andi	r25, 0xF7	; 247
     8a8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b2:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b6:	00 c1       	rjmp	.+512    	; 0xab8 <EVENT_USB_Device_ControlRequest+0x2f4>

	
				
				break;
			case Req_InitiateAbortBulkOut:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     8b8:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     8bc:	92 3a       	cpi	r25, 0xA2	; 162
     8be:	09 f0       	breq	.+2      	; 0x8c2 <EVENT_USB_Device_ControlRequest+0xfe>
     8c0:	05 c1       	rjmp	.+522    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     8c2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <RequestInProgress>
     8c6:	91 11       	cpse	r25, r1
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <EVENT_USB_Device_ControlRequest+0x122>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     8ca:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <CurrentTransferTag>
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 91 e5 01 	lds	r20, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
     8d4:	50 91 e6 01 	lds	r21, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x3>
     8d8:	42 17       	cp	r20, r18
     8da:	53 07       	cpc	r21, r19
     8dc:	31 f4       	brne	.+12     	; 0x8ea <EVENT_USB_Device_ControlRequest+0x126>
					{
						/* Indicate that all in-progress/pending data OUT requests should be aborted */
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
     8de:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <EVENT_USB_Device_ControlRequest+0x128>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     8e6:	83 e8       	ldi	r24, 0x83	; 131
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <EVENT_USB_Device_ControlRequest+0x128>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     8ea:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
					}
IsTMCBulkOUTReset = true;
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <IsTMCBulkOUTReset>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8f6:	97 7f       	andi	r25, 0xF7	; 247
     8f8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8fc:	dd c0       	rjmp	.+442    	; 0xab8 <EVENT_USB_Device_ControlRequest+0x2f4>
//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
				}

				break;
			case Req_CheckAbortBulkOutStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     8fe:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     902:	82 3a       	cpi	r24, 0xA2	; 162
     904:	09 f0       	breq	.+2      	; 0x908 <EVENT_USB_Device_ControlRequest+0x144>
     906:	e2 c0       	rjmp	.+452    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     908:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RequestInProgress>
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	d9 f5       	brne	.+118    	; 0x986 <EVENT_USB_Device_ControlRequest+0x1c2>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkOUTReset)
     910:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     914:	32 c0       	rjmp	.+100    	; 0x97a <EVENT_USB_Device_ControlRequest+0x1b6>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateAbortBulkIn:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     916:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     91a:	92 3a       	cpi	r25, 0xA2	; 162
     91c:	09 f0       	breq	.+2      	; 0x920 <EVENT_USB_Device_ControlRequest+0x15c>
     91e:	d6 c0       	rjmp	.+428    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     920:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <RequestInProgress>
     924:	91 11       	cpse	r25, r1
     926:	0e c0       	rjmp	.+28     	; 0x944 <EVENT_USB_Device_ControlRequest+0x180>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     928:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <CurrentTransferTag>
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 91 e5 01 	lds	r20, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
     932:	50 91 e6 01 	lds	r21, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x3>
     936:	42 17       	cp	r20, r18
     938:	53 07       	cpc	r21, r19
     93a:	31 f4       	brne	.+12     	; 0x948 <EVENT_USB_Device_ControlRequest+0x184>
					{
						/* Indicate that all in-progress/pending data IN requests should be aborted */
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
     93c:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	03 c0       	rjmp	.+6      	; 0x94a <EVENT_USB_Device_ControlRequest+0x186>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     944:	83 e8       	ldi	r24, 0x83	; 131
     946:	01 c0       	rjmp	.+2      	; 0x94a <EVENT_USB_Device_ControlRequest+0x186>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     948:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
					}
					IsTMCBulkINReset = true;
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkINReset>
     950:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     954:	97 7f       	andi	r25, 0xF7	; 247
     956:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     95a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_8(CurrentTransferTag);
     95e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <CurrentTransferTag>
     962:	aa c0       	rjmp	.+340    	; 0xab8 <EVENT_USB_Device_ControlRequest+0x2f4>
#endif
				}

				break;
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     964:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     968:	82 3a       	cpi	r24, 0xA2	; 162
     96a:	09 f0       	breq	.+2      	; 0x96e <EVENT_USB_Device_ControlRequest+0x1aa>
     96c:	af c0       	rjmp	.+350    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     96e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RequestInProgress>
     972:	83 30       	cpi	r24, 0x03	; 3
     974:	41 f4       	brne	.+16     	; 0x986 <EVENT_USB_Device_ControlRequest+0x1c2>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
     976:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     97a:	81 11       	cpse	r24, r1
     97c:	06 c0       	rjmp	.+12     	; 0x98a <EVENT_USB_Device_ControlRequest+0x1c6>
					  TMCRequestStatus = TMC_STATUS_PENDING;
					else
					  RequestInProgress = 0;
     97e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	03 c0       	rjmp	.+6      	; 0x98c <EVENT_USB_Device_ControlRequest+0x1c8>
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     986:	82 e8       	ldi	r24, 0x82	; 130
     988:	01 c0       	rjmp	.+2      	; 0x98c <EVENT_USB_Device_ControlRequest+0x1c8>
					else if (IsTMCBulkINReset)
					  TMCRequestStatus = TMC_STATUS_PENDING;
     98a:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     98c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     990:	97 7f       	andi	r25, 0xF7	; 247
     992:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     996:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     99a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     99e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_16_LE(0);
					Endpoint_Write_32_LE(LastTransferLength);
     9a2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <LastTransferLength>
     9a6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <LastTransferLength+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     9aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	89 2f       	mov	r24, r25
     9b4:	9a 2f       	mov	r25, r26
     9b6:	ab 2f       	mov	r26, r27
     9b8:	bb 27       	eor	r27, r27
     9ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     9be:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9c2:	34 c0       	rjmp	.+104    	; 0xa2c <EVENT_USB_Device_ControlRequest+0x268>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateClear:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9c4:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     9c8:	91 3a       	cpi	r25, 0xA1	; 161
     9ca:	09 f0       	breq	.+2      	; 0x9ce <EVENT_USB_Device_ControlRequest+0x20a>
     9cc:	7f c0       	rjmp	.+254    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that no split transaction is already in progress */
					if (RequestInProgress != 0)
     9ce:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <RequestInProgress>
     9d2:	99 23       	and	r25, r25
     9d4:	21 f0       	breq	.+8      	; 0x9de <EVENT_USB_Device_ControlRequest+0x21a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9d6:	83 e8       	ldi	r24, 0x83	; 131
     9d8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9dc:	67 c0       	rjmp	.+206    	; 0xaac <EVENT_USB_Device_ControlRequest+0x2e8>
						Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
					}
					else
					{
						/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
						IsTMCBulkINReset  = true;
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkINReset>
						IsTMCBulkOUTReset = true;
     9e4:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <IsTMCBulkOUTReset>

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateClear;
     9e8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <RequestInProgress>
     9ec:	5f c0       	rjmp	.+190    	; 0xaac <EVENT_USB_Device_ControlRequest+0x2e8>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9ee:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     9f2:	81 3a       	cpi	r24, 0xA1	; 161
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <EVENT_USB_Device_ControlRequest+0x234>
     9f6:	6a c0       	rjmp	.+212    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
     9f8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <RequestInProgress>
     9fc:	85 30       	cpi	r24, 0x05	; 5
     9fe:	61 f4       	brne	.+24     	; 0xa18 <EVENT_USB_Device_ControlRequest+0x254>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
     a00:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     a04:	81 11       	cpse	r24, r1
     a06:	0a c0       	rjmp	.+20     	; 0xa1c <EVENT_USB_Device_ControlRequest+0x258>
     a08:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     a0c:	81 11       	cpse	r24, r1
     a0e:	06 c0       	rjmp	.+12     	; 0xa1c <EVENT_USB_Device_ControlRequest+0x258>
						TMCRequestStatus = TMC_STATUS_PENDING;
					else
						RequestInProgress = 0;
     a10:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <EVENT_USB_Device_ControlRequest+0x25a>
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     a18:	82 e8       	ldi	r24, 0x82	; 130
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <EVENT_USB_Device_ControlRequest+0x25a>
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
						TMCRequestStatus = TMC_STATUS_PENDING;
     a1c:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a1e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a22:	97 7f       	andi	r25, 0xF7	; 247
     a24:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a28:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a2c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a30:	45 c0       	rjmp	.+138    	; 0xabc <EVENT_USB_Device_ControlRequest+0x2f8>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_GetCapabilities:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a32:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
     a36:	81 3a       	cpi	r24, 0xA1	; 161
     a38:	09 f0       	breq	.+2      	; 0xa3c <EVENT_USB_Device_ControlRequest+0x278>
     a3a:	48 c0       	rjmp	.+144    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a40:	87 7f       	andi	r24, 0xF7	; 247
     a42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					Endpoint_ClearSETUP();

					/* Write the device capabilities to the control endpoint */
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     a46:	68 e1       	ldi	r22, 0x18	; 24
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	e5 d6       	rcall	.+3530   	; 0x181a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a54:	8b 77       	andi	r24, 0x7B	; 123
     a56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a5a:	38 c0       	rjmp	.+112    	; 0xacc <EVENT_USB_Device_ControlRequest+0x308>
				_delay_ms(250);
				LED(1);
				
				break;
			case Req_RenControl:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     a5c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
     a60:	81 30       	cpi	r24, 0x01	; 1
				{
					gpib_ren(1);
				}
				else
				{
					gpib_ren(0);
     a62:	09 f0       	breq	.+2      	; 0xa66 <EVENT_USB_Device_ControlRequest+0x2a2>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	3c d4       	rcall	.+2168   	; 0x12e0 <gpib_ren>
     a68:	21 c0       	rjmp	.+66     	; 0xaac <EVENT_USB_Device_ControlRequest+0x2e8>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     a6a:	80 e5       	ldi	r24, 0x50	; 80
     a6c:	93 ec       	ldi	r25, 0xC3	; 195
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     a76:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     a7a:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     a7e:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_LocalLockout:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_localLockout(is_timedout);
     a82:	81 e1       	ldi	r24, 0x11	; 17
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	f6 d4       	rcall	.+2540   	; 0x1474 <gpib_localLockout>
     a88:	11 c0       	rjmp	.+34     	; 0xaac <EVENT_USB_Device_ControlRequest+0x2e8>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     a8a:	80 e5       	ldi	r24, 0x50	; 80
     a8c:	93 ec       	ldi	r25, 0xC3	; 195
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     a96:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     a9a:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     a9e:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_GoToLocal:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_gotoLocal(gpib_addr, is_timedout);
     aa2:	61 e1       	ldi	r22, 0x11	; 17
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     aaa:	d0 d4       	rcall	.+2464   	; 0x144c <gpib_gotoLocal>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ab0:	87 7f       	andi	r24, 0xF7	; 247
     ab2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     abc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ac0:	8e 77       	andi	r24, 0x7E	; 126
     ac2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     ac6:	cf 91       	pop	r28
				
				Endpoint_ClearSETUP();
				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ac8:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <Endpoint_ClearStatusStage>
				break;
		}
	}
}
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <ProcessSentMessage>:


void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	6c 01       	movw	r12, r24
     ae2:	f6 2e       	mov	r15, r22
     ae4:	c4 2f       	mov	r28, r20
     ae6:	e2 2e       	mov	r14, r18
	uint8_t i, dat;
	bool timedout;
	 
	timedout = false;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	fa d3       	rcall	.+2036   	; 0x12e0 <gpib_ren>
	
	LED(0);
     aec:	8d 98       	cbi	0x11, 5	; 17
	if (isFirstTransfer)
     aee:	cc 23       	and	r28, r28
     af0:	29 f0       	breq	.+10     	; 0xafc <ProcessSentMessage+0x2c>
		timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     af2:	b8 01       	movw	r22, r16
     af4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     af8:	75 d5       	rcall	.+2794   	; 0x15e4 <gpib_make_listener>
     afa:	01 c0       	rjmp	.+2      	; 0xafe <ProcessSentMessage+0x2e>
void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
	uint8_t i, dat;
	bool timedout;
	 
	timedout = false;
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e6 01       	movw	r28, r12
	i = 0;
	while ( (Length > 0) && !timedout)
	{
		Length--;
		dat = Data[i++];
		timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     b00:	ce 2c       	mov	r12, r14
	LED(0);
	if (isFirstTransfer)
		timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
		
	i = 0;
	while ( (Length > 0) && !timedout)
     b02:	ff 20       	and	r15, r15
     b04:	69 f0       	breq	.+26     	; 0xb20 <__stack+0x21>
     b06:	81 11       	cpse	r24, r1
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <__stack+0x2d>
	{
		Length--;
     b0a:	fa 94       	dec	r15
		dat = Data[i++];
     b0c:	89 91       	ld	r24, Y+
		timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     b0e:	f1 10       	cpse	r15, r1
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x17>
     b12:	6c 2d       	mov	r22, r12
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <__stack+0x19>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	61 70       	andi	r22, 0x01	; 1
     b1a:	a8 01       	movw	r20, r16
     b1c:	83 d5       	rcall	.+2822   	; 0x1624 <gpib_writedat>
     b1e:	f1 cf       	rjmp	.-30     	; 0xb02 <__stack+0x3>
	}
	
	if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     b20:	ee 20       	and	r14, r14
     b22:	21 f0       	breq	.+8      	; 0xb2c <__stack+0x2d>
     b24:	81 11       	cpse	r24, r1
		gpib_untalk_unlisten(ptimeoutfunc);
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <__stack+0x2d>
     b28:	c8 01       	movw	r24, r16
     b2a:	2c d5       	rcall	.+2648   	; 0x1584 <gpib_untalk_unlisten>
	LED(1);
     b2c:	8d 9a       	sbi	0x11, 5	; 17
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <GetNextMessage>:

uint8_t GetNextMessage(uint8_t* const Data, uint8_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <GetNextMessage+0x1c>
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	5c 01       	movw	r10, r24
     b62:	f6 2e       	mov	r15, r22
     b64:	74 2e       	mov	r7, r20
     b66:	49 01       	movw	r8, r18
     b68:	68 01       	movw	r12, r16
	uint8_t c, i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	b9 d3       	rcall	.+1906   	; 0x12e0 <gpib_ren>
	
	LED(0);	
     b6e:	8d 98       	cbi	0x11, 5	; 17
	
	timedout = false;
     b70:	19 82       	std	Y+1, r1	; 0x01
	if (isFirstMessage)
     b72:	77 20       	and	r7, r7
     b74:	29 f0       	breq	.+10     	; 0xb80 <GetNextMessage+0x40>
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
     b76:	b8 01       	movw	r22, r16
     b78:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     b7c:	17 d5       	rcall	.+2606   	; 0x15ac <gpib_make_talker>
     b7e:	89 83       	std	Y+1, r24	; 0x01

	i = 0;
	Eoi = false;
     b80:	1a 82       	std	Y+2, r1	; 0x02
     b82:	86 e2       	ldi	r24, 0x26	; 38
     b84:	68 2e       	mov	r6, r24
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	78 2e       	mov	r7, r24
	
	timedout = false;
	if (isFirstMessage)
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);

	i = 0;
     b8a:	10 e0       	ldi	r17, 0x00	; 0
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	91 11       	cpse	r25, r1
     b92:	13 c0       	rjmp	.+38     	; 0xbba <GetNextMessage+0x7a>
     b94:	f1 16       	cp	r15, r17
     b96:	b1 f0       	breq	.+44     	; 0xbc4 <GetNextMessage+0x84>
     b98:	81 11       	cpse	r24, r1
     b9a:	18 c0       	rjmp	.+48     	; 0xbcc <GetNextMessage+0x8c>
	{
	
		c = gpib_readdat(&Eoi, &timedout, ptimeoutfunc); 
     b9c:	a6 01       	movw	r20, r12
     b9e:	be 01       	movw	r22, r28
     ba0:	6f 5f       	subi	r22, 0xFF	; 255
     ba2:	7f 4f       	sbci	r23, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	02 96       	adiw	r24, 0x02	; 2
     ba8:	70 d4       	rcall	.+2272   	; 0x148a <gpib_readdat>
		if (!timedout)
     baa:	99 81       	ldd	r25, Y+1	; 0x01
     bac:	91 11       	cpse	r25, r1
     bae:	ee cf       	rjmp	.-36     	; 0xb8c <GetNextMessage+0x4c>
			NextResponseBuffer[i++] = c;
     bb0:	1f 5f       	subi	r17, 0xFF	; 255
     bb2:	f3 01       	movw	r30, r6
     bb4:	81 93       	st	Z+, r24
     bb6:	3f 01       	movw	r6, r30
     bb8:	e9 cf       	rjmp	.-46     	; 0xb8c <GetNextMessage+0x4c>
	}
		
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
     bba:	81 11       	cpse	r24, r1
		gpib_untalk_unlisten(ptimeoutfunc);
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <GetNextMessage+0x8c>
     bbe:	c6 01       	movw	r24, r12
     bc0:	e1 d4       	rcall	.+2498   	; 0x1584 <gpib_untalk_unlisten>
     bc2:	f1 2e       	mov	r15, r17

	if (timedout) /* in case of timedout, simulate an end of message */
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 23       	and	r24, r24
     bc8:	21 f0       	breq	.+8      	; 0xbd2 <GetNextMessage+0x92>
     bca:	1f 2d       	mov	r17, r15
		Eoi = true;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	f1 2e       	mov	r15, r17
	*pisLastMessage = Eoi;
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	f4 01       	movw	r30, r8
     bd6:	80 83       	st	Z, r24
	
//NextResponseBuffer[i++]	= gpib_search();

	memcpy((char*)Data, (char*)NextResponseBuffer, i);
     bd8:	4f 2d       	mov	r20, r15
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	66 e2       	ldi	r22, 0x26	; 38
     bde:	71 e0       	ldi	r23, 0x01	; 1
     be0:	c5 01       	movw	r24, r10
     be2:	0e 94 af 10 	call	0x215e	; 0x215e <memcpy>
	
	LED(1);
     be6:	8d 9a       	sbi	0x11, 5	; 17

	return i;
}
     be8:	8f 2d       	mov	r24, r15
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	08 95       	ret

00000c0a <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	TMC_LastMessageComplete = true;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
	TMC_InLastMessageComplete = true;
     c10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
	s_remaining_bytes_receive = 0;
     c14:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <s_remaining_bytes_receive>
     c18:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <s_remaining_bytes_receive+0x1>
     c1c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <s_remaining_bytes_receive+0x2>
     c20:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <s_remaining_bytes_receive+0x3>
	gpib_interface_clear();
     c24:	63 c3       	rjmp	.+1734   	; 0x12ec <gpib_interface_clear>

00000c26 <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <ReadTMCHeader+0xa>
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c34:	23 e0       	ldi	r18, 0x03	; 3
     c36:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c3a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     c3e:	22 ff       	sbrs	r18, 2
     c40:	1c c0       	rjmp	.+56     	; 0xc7a <ReadTMCHeader+0x54>
     c42:	8c 01       	movw	r16, r24
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     c44:	1a 82       	std	Y+2, r1	; 0x02
     c46:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     c48:	ae 01       	movw	r20, r28
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	6c e0       	ldi	r22, 0x0C	; 12
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	c8 01       	movw	r24, r16
     c54:	99 d5       	rcall	.+2866   	; 0x1788 <Endpoint_Read_Stream_LE>
     c56:	98 2f       	mov	r25, r24
     c58:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     c5c:	95 30       	cpi	r25, 0x05	; 5
     c5e:	11 f4       	brne	.+4      	; 0xc64 <ReadTMCHeader+0x3e>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
     c60:	88 23       	and	r24, r24
     c62:	91 f3       	breq	.-28     	; 0xc48 <ReadTMCHeader+0x22>
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     c64:	f8 01       	movw	r30, r16
     c66:	21 81       	ldd	r18, Z+1	; 0x01
     c68:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     c6c:	81 11       	cpse	r24, r1
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <ReadTMCHeader+0x4e>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	91 11       	cpse	r25, r1
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <ReadTMCHeader+0x56>
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
	  return false;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
}
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	00 d0       	rcall	.+0      	; 0xc94 <WriteTMCHeader+0xa>
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     c9a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <CurrentTransferTag>
     c9e:	f8 01       	movw	r30, r16
     ca0:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
     ca2:	80 95       	com	r24
     ca4:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     cb0:	ae 01       	movw	r20, r28
     cb2:	4f 5f       	subi	r20, 0xFF	; 255
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	6c e0       	ldi	r22, 0x0C	; 12
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	c8 01       	movw	r24, r16
     cbc:	1c d5       	rcall	.+2616   	; 0x16f6 <Endpoint_Write_Stream_LE>
     cbe:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <IsTMCBulkINReset>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	11 f4       	brne	.+4      	; 0xcca <WriteTMCHeader+0x40>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkINReset)
     cc6:	99 23       	and	r25, r25
     cc8:	99 f3       	breq	.-26     	; 0xcb0 <WriteTMCHeader+0x26>
		  break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     cca:	91 11       	cpse	r25, r1
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <WriteTMCHeader+0x4e>
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	81 11       	cpse	r24, r1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	89 2f       	mov	r24, r25
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <WriteTMCHeader+0x50>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
}
     cda:	81 70       	andi	r24, 0x01	; 1
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <TMC_Task>:
//	gpib_untalk_unlisten();
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void)
{
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	cd 58       	subi	r28, 0x8D	; 141
     d02:	d1 09       	sbc	r29, r1
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
	bool lastmessage;
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     d0e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	09 f0       	breq	.+2      	; 0xd18 <TMC_Task+0x2e>
     d16:	9d c1       	rjmp	.+826    	; 0x1052 <TMC_Task+0x368>
	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128], curlen;
	
	

	if (s_remaining_bytes_receive == 0)
     d18:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     d1c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     d20:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     d24:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     d28:	89 2b       	or	r24, r25
     d2a:	8a 2b       	or	r24, r26
     d2c:	8b 2b       	or	r24, r27
     d2e:	09 f0       	breq	.+2      	; 0xd32 <TMC_Task+0x48>
     d30:	20 c1       	rjmp	.+576    	; 0xf72 <TMC_Task+0x288>
	{
	
		/* Try to read in a TMC message from the interface, process if one is available */
		if (ReadTMCHeader(&MessageHeader))
     d32:	ce 01       	movw	r24, r28
     d34:	8f 57       	subi	r24, 0x7F	; 127
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	76 df       	rcall	.-276    	; 0xc26 <ReadTMCHeader>
     d3a:	88 23       	and	r24, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <TMC_Task+0x56>
     d3e:	7d c1       	rjmp	.+762    	; 0x103a <TMC_Task+0x350>
		{
		dbg++;
     d40:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     d44:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     d4e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
			/* Indicate busy */
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
     d52:	cf 57       	subi	r28, 0x7F	; 127
     d54:	df 4f       	sbci	r29, 0xFF	; 255
     d56:	88 81       	ld	r24, Y
     d58:	c1 58       	subi	r28, 0x81	; 129
     d5a:	d0 40       	sbci	r29, 0x00	; 0
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	09 f4       	brne	.+2      	; 0xd62 <TMC_Task+0x78>
     d60:	9e c0       	rjmp	.+316    	; 0xe9e <TMC_Task+0x1b4>
     d62:	80 38       	cpi	r24, 0x80	; 128
     d64:	21 f0       	breq	.+8      	; 0xd6e <TMC_Task+0x84>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <TMC_Task+0x82>
     d6a:	fd c0       	rjmp	.+506    	; 0xf66 <TMC_Task+0x27c>
     d6c:	17 c0       	rjmp	.+46     	; 0xd9c <TMC_Task+0xb2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     d6e:	80 e5       	ldi	r24, 0x50	; 80
     d70:	93 ec       	ldi	r25, 0xC3	; 195
     d72:	a0 e0       	ldi	r26, 0x00	; 0
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timeout_val>
     d7a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <timeout_val+0x1>
     d7e:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <timeout_val+0x2>
     d82:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <timeout_val+0x3>

			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
     d86:	61 e1       	ldi	r22, 0x11	; 17
     d88:	71 e0       	ldi	r23, 0x01	; 1
     d8a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     d8e:	49 d3       	rcall	.+1682   	; 0x1422 <gpib_trigger>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d94:	8b 77       	andi	r24, 0x7B	; 123
     d96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d9a:	4f c1       	rjmp	.+670    	; 0x103a <TMC_Task+0x350>
					Endpoint_ClearOUT();					
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
     d9c:	cb 57       	subi	r28, 0x7B	; 123
     d9e:	df 4f       	sbci	r29, 0xFF	; 255
     da0:	38 81       	ld	r19, Y
     da2:	c5 58       	subi	r28, 0x85	; 133
     da4:	d0 40       	sbci	r29, 0x00	; 0
     da6:	ca 57       	subi	r28, 0x7A	; 122
     da8:	df 4f       	sbci	r29, 0xFF	; 255
     daa:	28 81       	ld	r18, Y
     dac:	c6 58       	subi	r28, 0x86	; 134
     dae:	d0 40       	sbci	r29, 0x00	; 0
     db0:	c9 57       	subi	r28, 0x79	; 121
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	98 81       	ld	r25, Y
     db6:	c7 58       	subi	r28, 0x87	; 135
     db8:	d0 40       	sbci	r29, 0x00	; 0
     dba:	c8 57       	subi	r28, 0x78	; 120
     dbc:	df 4f       	sbci	r29, 0xFF	; 255
     dbe:	88 81       	ld	r24, Y
     dc0:	c8 58       	subi	r28, 0x88	; 136
     dc2:	d0 40       	sbci	r29, 0x00	; 0
     dc4:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <s_remaining_bytes_receive>
     dc8:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <s_remaining_bytes_receive+0x1>
     dcc:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <s_remaining_bytes_receive+0x2>
     dd0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					LastTransferLength = 0;
     dd4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength+0x1>
     dd8:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <LastTransferLength>
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
     ddc:	c3 2e       	mov	r12, r19
     dde:	d2 2e       	mov	r13, r18
     de0:	e9 2e       	mov	r14, r25
     de2:	f8 2e       	mov	r15, r24
     de4:	85 e3       	ldi	r24, 0x35	; 53
     de6:	c8 16       	cp	r12, r24
     de8:	d1 04       	cpc	r13, r1
     dea:	e1 04       	cpc	r14, r1
     dec:	f1 04       	cpc	r15, r1
     dee:	28 f0       	brcs	.+10     	; 0xdfa <TMC_Task+0x110>
     df0:	94 e3       	ldi	r25, 0x34	; 52
     df2:	c9 2e       	mov	r12, r25
     df4:	d1 2c       	mov	r13, r1
     df6:	e1 2c       	mov	r14, r1
     df8:	f1 2c       	mov	r15, r1
     dfa:	bc 2c       	mov	r11, r12
					//
					while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     dfc:	46 e6       	ldi	r20, 0x66	; 102
     dfe:	51 e0       	ldi	r21, 0x01	; 1
     e00:	b6 01       	movw	r22, r12
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	c0 d4       	rcall	.+2432   	; 0x1788 <Endpoint_Read_Stream_LE>
     e08:	85 30       	cpi	r24, 0x05	; 5
     e0a:	21 f4       	brne	.+8      	; 0xe14 <TMC_Task+0x12a>
						   ENDPOINT_RWSTREAM_IncompleteTransfer)
					{
						if (IsTMCBulkOUTReset)
     e0c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     e10:	88 23       	and	r24, r24
     e12:	a1 f3       	breq	.-24     	; 0xdfc <TMC_Task+0x112>
						  break;
					}					
					
					s_remaining_bytes_receive -= curlen;
     e14:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     e18:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     e1c:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     e20:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     e24:	8c 19       	sub	r24, r12
     e26:	9d 09       	sbc	r25, r13
     e28:	ae 09       	sbc	r26, r14
     e2a:	bf 09       	sbc	r27, r15
     e2c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
     e30:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
     e34:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
     e38:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
     e3c:	c7 57       	subi	r28, 0x77	; 119
     e3e:	df 4f       	sbci	r29, 0xFF	; 255
     e40:	28 81       	ld	r18, Y
     e42:	c9 58       	subi	r28, 0x89	; 137
     e44:	d0 40       	sbci	r29, 0x00	; 0
     e46:	31 e0       	ldi	r19, 0x01	; 1
     e48:	21 11       	cpse	r18, r1
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <TMC_Task+0x164>
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <TMC_eom>
					lastmessage =  TMC_eom && (s_remaining_bytes_receive==0);
     e52:	22 23       	and	r18, r18
     e54:	29 f0       	breq	.+10     	; 0xe60 <TMC_Task+0x176>
     e56:	21 e0       	ldi	r18, 0x01	; 1
     e58:	89 2b       	or	r24, r25
     e5a:	8a 2b       	or	r24, r26
     e5c:	8b 2b       	or	r24, r27
     e5e:	09 f0       	breq	.+2      	; 0xe62 <TMC_Task+0x178>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	21 70       	andi	r18, 0x01	; 1
     e64:	c3 57       	subi	r28, 0x73	; 115
     e66:	df 4f       	sbci	r29, 0xFF	; 255
     e68:	28 83       	st	Y, r18
     e6a:	cd 58       	subi	r28, 0x8D	; 141
     e6c:	d0 40       	sbci	r29, 0x00	; 0
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, tmc_gpib_write_timedout);
     e6e:	00 e3       	ldi	r16, 0x30	; 48
     e70:	11 e0       	ldi	r17, 0x01	; 1
     e72:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
     e76:	6b 2d       	mov	r22, r11
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	29 de       	rcall	.-942    	; 0xad0 <ProcessSentMessage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e88:	8b 77       	andi	r24, 0x7B	; 123
     e8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					
					/* Select the Data Out endpoint, this has to be done because the timeout function cal select the control endpoint */
					Endpoint_SelectEndpoint(TMC_OUT_EPADDR);
					Endpoint_ClearOUT();
					
					TMC_LastMessageComplete = lastmessage;
     e8e:	c3 57       	subi	r28, 0x73	; 115
     e90:	df 4f       	sbci	r29, 0xFF	; 255
     e92:	88 81       	ld	r24, Y
     e94:	cd 58       	subi	r28, 0x8D	; 141
     e96:	d0 40       	sbci	r29, 0x00	; 0
     e98:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
					break;
     e9c:	ce c0       	rjmp	.+412    	; 0x103a <TMC_Task+0x350>
     e9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea2:	8b 77       	andi	r24, 0x7B	; 123
     ea4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
//FIXME: ZLP not OK! -------------------------------------------------------v
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t) -1, MessageHeader.TransferSize);
					MessageHeader.TransferSize = GetNextMessage(MessagePayload, curlen, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
     ea8:	cb 57       	subi	r28, 0x7B	; 123
     eaa:	df 4f       	sbci	r29, 0xFF	; 255
     eac:	68 81       	ld	r22, Y
     eae:	79 81       	ldd	r23, Y+1	; 0x01
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	9b 81       	ldd	r25, Y+3	; 0x03
     eb4:	c5 58       	subi	r28, 0x85	; 133
     eb6:	d0 40       	sbci	r29, 0x00	; 0
     eb8:	64 33       	cpi	r22, 0x34	; 52
     eba:	71 05       	cpc	r23, r1
     ebc:	81 05       	cpc	r24, r1
     ebe:	91 05       	cpc	r25, r1
     ec0:	20 f0       	brcs	.+8      	; 0xeca <TMC_Task+0x1e0>
     ec2:	63 e3       	ldi	r22, 0x33	; 51
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	08 e3       	ldi	r16, 0x38	; 56
     ecc:	11 e0       	ldi	r17, 0x01	; 1
     ece:	9e 01       	movw	r18, r28
     ed0:	23 57       	subi	r18, 0x73	; 115
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <TMC_InLastMessageComplete>
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	31 de       	rcall	.-926    	; 0xb40 <GetNextMessage>
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	cb 57       	subi	r28, 0x7B	; 123
     ee6:	df 4f       	sbci	r29, 0xFF	; 255
     ee8:	88 83       	st	Y, r24
     eea:	99 83       	std	Y+1, r25	; 0x01
     eec:	aa 83       	std	Y+2, r26	; 0x02
     eee:	bb 83       	std	Y+3, r27	; 0x03
     ef0:	c5 58       	subi	r28, 0x85	; 133
     ef2:	d0 40       	sbci	r29, 0x00	; 0
					TMC_InLastMessageComplete = lastmessage;
     ef4:	c3 57       	subi	r28, 0x73	; 115
     ef6:	df 4f       	sbci	r29, 0xFF	; 255
     ef8:	88 81       	ld	r24, Y
     efa:	cd 58       	subi	r28, 0x8D	; 141
     efc:	d0 40       	sbci	r29, 0x00	; 0
     efe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TMC_InLastMessageComplete>
					
					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
     f02:	c7 57       	subi	r28, 0x77	; 119
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	88 83       	st	Y, r24
     f08:	c9 58       	subi	r28, 0x89	; 137
     f0a:	d0 40       	sbci	r29, 0x00	; 0
					if (!IsTMCBulkINReset)
     f0c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     f10:	81 11       	cpse	r24, r1
						WriteTMCHeader(&MessageHeader);					
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <TMC_Task+0x232>
     f14:	ce 01       	movw	r24, r28
     f16:	8f 57       	subi	r24, 0x7F	; 127
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	b7 de       	rcall	.-658    	; 0xc8a <WriteTMCHeader>
					
					LastTransferLength = 0;
     f1c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength+0x1>
     f20:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <LastTransferLength>
					if (!IsTMCBulkINReset)
     f24:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     f28:	88 23       	and	r24, r24
     f2a:	79 f0       	breq	.+30     	; 0xf4a <TMC_Task+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f36:	8e 77       	andi	r24, 0x7E	; 126
     f38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

					/* Also in case of a timeout, the host does not expire a Bulk IN IRP, so we still need to commit an empty endpoint to retire the IRP */
					Endpoint_SelectEndpoint(TMC_IN_EPADDR);
					Endpoint_ClearIN();
					
					if (IsTMCBulkINReset)
     f3c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
     f40:	88 23       	and	r24, r24
     f42:	09 f4       	brne	.+2      	; 0xf46 <TMC_Task+0x25c>
					{
						//Endpoint_SelectEndpoint(TMC_IN_EPADDR);
						//Endpoint_AbortPendingIN();
						/* KG: Added for proper synchronsity handling */
						//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
						TMC_resetstates();
     f44:	7a c0       	rjmp	.+244    	; 0x103a <TMC_Task+0x350>
     f46:	61 de       	rcall	.-830    	; 0xc0a <TMC_resetstates>
     f48:	78 c0       	rjmp	.+240    	; 0x103a <TMC_Task+0x350>
						WriteTMCHeader(&MessageHeader);					
					
					LastTransferLength = 0;
					if (!IsTMCBulkINReset)
					{
						while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
     f4a:	cb 57       	subi	r28, 0x7B	; 123
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	68 81       	ld	r22, Y
     f50:	79 81       	ldd	r23, Y+1	; 0x01
     f52:	c5 58       	subi	r28, 0x85	; 133
     f54:	d0 40       	sbci	r29, 0x00	; 0
     f56:	46 e6       	ldi	r20, 0x66	; 102
     f58:	51 e0       	ldi	r21, 0x01	; 1
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	cb d3       	rcall	.+1942   	; 0x16f6 <Endpoint_Write_Stream_LE>
     f60:	85 30       	cpi	r24, 0x05	; 5
     f62:	01 f3       	breq	.-64     	; 0xf24 <TMC_Task+0x23a>
     f64:	e3 cf       	rjmp	.-58     	; 0xf2c <TMC_Task+0x242>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f66:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f70:	64 c0       	rjmp	.+200    	; 0x103a <TMC_Task+0x350>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	
			/* Select the Data Out endpoint */
		Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
     f7c:	82 ff       	sbrs	r24, 2
     f7e:	5d c0       	rjmp	.+186    	; 0x103a <TMC_Task+0x350>
		{
			LastTransferLength = 0;
     f80:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength+0x1>
     f84:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <LastTransferLength>
			
			curlen = TMC_IO_EPSIZE;
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
     f88:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     f8c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     f90:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     f94:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     f98:	80 34       	cpi	r24, 0x40	; 64
     f9a:	91 05       	cpc	r25, r1
     f9c:	a1 05       	cpc	r26, r1
     f9e:	b1 05       	cpc	r27, r1
     fa0:	10 f4       	brcc	.+4      	; 0xfa6 <TMC_Task+0x2bc>
			{
				curlen = s_remaining_bytes_receive;
     fa2:	f8 2e       	mov	r15, r24
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <TMC_Task+0x2c0>
		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
		{
			LastTransferLength = 0;
			
			curlen = TMC_IO_EPSIZE;
     fa6:	80 e4       	ldi	r24, 0x40	; 64
			{
				curlen = s_remaining_bytes_receive;
			}
			
			//
			while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     fa8:	f8 2e       	mov	r15, r24
     faa:	cf 2c       	mov	r12, r15
     fac:	d1 2c       	mov	r13, r1
     fae:	46 e6       	ldi	r20, 0x66	; 102
     fb0:	51 e0       	ldi	r21, 0x01	; 1
     fb2:	b6 01       	movw	r22, r12
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	e7 d3       	rcall	.+1998   	; 0x1788 <Endpoint_Read_Stream_LE>
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <TMC_Task+0x2dc>
				   ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkOUTReset)
     fbe:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
     fc2:	88 23       	and	r24, r24
     fc4:	a1 f3       	breq	.-24     	; 0xfae <TMC_Task+0x2c4>
				  break;
			}
			s_remaining_bytes_receive -= curlen;
     fc6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     fca:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     fce:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     fd2:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     fd6:	8f 19       	sub	r24, r15
     fd8:	91 09       	sbc	r25, r1
     fda:	a1 09       	sbc	r26, r1
     fdc:	b1 09       	sbc	r27, r1
     fde:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
     fe2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
     fe6:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
     fea:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff2:	8b 77       	andi	r24, 0x7B	; 123
     ff4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
			
			lastmessage = TMC_eom && (s_remaining_bytes_receive==0);
     ff8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <TMC_eom>
     ffc:	88 23       	and	r24, r24
     ffe:	69 f0       	breq	.+26     	; 0x101a <TMC_Task+0x330>
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    1006:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    100a:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    100e:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    1012:	89 2b       	or	r24, r25
    1014:	8a 2b       	or	r24, r26
    1016:	8b 2b       	or	r24, r27
    1018:	09 f0       	breq	.+2      	; 0x101c <TMC_Task+0x332>
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	21 70       	andi	r18, 0x01	; 1
    101e:	c3 57       	subi	r28, 0x73	; 115
    1020:	df 4f       	sbci	r29, 0xFF	; 255
    1022:	28 83       	st	Y, r18
    1024:	cd 58       	subi	r28, 0x8D	; 141
			TMC_LastMessageComplete = lastmessage;
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, tmc_gpib_write_timedout);
    102c:	00 e3       	ldi	r16, 0x30	; 48
    102e:	11 e0       	ldi	r17, 0x01	; 1
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	6f 2d       	mov	r22, r15
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
		}
	}

	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
    1038:	4b dd       	rcall	.-1386   	; 0xad0 <ProcessSentMessage>
    103a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <IsTMCBulkOUTReset>
    103e:	81 11       	cpse	r24, r1
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <TMC_Task+0x35e>
    1042:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkINReset>
		TMC_resetstates();
    1046:	81 11       	cpse	r24, r1
    1048:	e0 dd       	rcall	.-1088   	; 0xc0a <TMC_resetstates>
	
	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    104a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsTMCBulkINReset>
	IsTMCBulkOUTReset = false;
    104e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <IsTMCBulkOUTReset>
}
    1052:	c3 57       	subi	r28, 0x73	; 115
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	08 95       	ret

00001074 <main>:
int main(void)
{
	uint8_t prevaddr;

	//mcusr_mirror = MCUSR; 
	MCUSR = 0; 
    1074:	14 be       	out	0x34, r1	; 52
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	a8 95       	wdr
    107c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1080:	88 61       	ori	r24, 0x18	; 24
    1082:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1086:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    108a:	0f be       	out	0x3f, r0	; 63
	wdt_disable(); 
	
	PORTB |=  (1<<2); /* PB2 = PULLUP */
    108c:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  &= ~(1<<2); /* PB2 = input*/
    108e:	22 98       	cbi	0x04, 2	; 4
	
	SetupHardware();
    1090:	65 db       	rcall	.-2358   	; 0x75c <SetupHardware>
	
	gpib_init();
    1092:	40 d1       	rcall	.+640    	; 0x1314 <gpib_init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1094:	78 94       	sei
	
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
    1096:	1d d1       	rcall	.+570    	; 0x12d2 <gpib_is_connected>
    1098:	81 11       	cpse	r24, r1
    109a:	17 c0       	rjmp	.+46     	; 0x10ca <main+0x56>
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	84 e3       	ldi	r24, 0x34	; 52
    10a0:	9c e0       	ldi	r25, 0x0C	; 12
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <main+0x2e>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <main+0x38>
    10ac:	00 00       	nop
    10ae:	8d 9a       	sbi	0x11, 5	; 17
	{
		_delay_ms(250);
		LED(1);
    10b0:	ef ef       	ldi	r30, 0xFF	; 255
    10b2:	f4 e3       	ldi	r31, 0x34	; 52
    10b4:	2c e0       	ldi	r18, 0x0C	; 12
    10b6:	e1 50       	subi	r30, 0x01	; 1
    10b8:	f0 40       	sbci	r31, 0x00	; 0
    10ba:	20 40       	sbci	r18, 0x00	; 0
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0x42>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <main+0x4c>
    10c0:	00 00       	nop
		_delay_ms(250);
		LED(0);
		check_bootloaderEntry();
    10c2:	8d 98       	cbi	0x11, 5	; 17
    10c4:	2f db       	rcall	.-2466   	; 0x724 <check_bootloaderEntry>
			LED(0);
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		check_bootloaderEntry();
    10c6:	e7 cf       	rjmp	.-50     	; 0x1096 <main+0x22>
    10c8:	2d db       	rcall	.-2470   	; 0x724 <check_bootloaderEntry>
		LED(0);
		check_bootloaderEntry();
	}
	
	/* physically GPIB is connected, now check if any GPIB address is responsive */
	while (!findGpibdevice())
    10ca:	fd d8       	rcall	.-3590   	; 0x2c6 <findGpibdevice>
    10cc:	81 11       	cpse	r24, r1
    10ce:	2c c0       	rjmp	.+88     	; 0x1128 <main+0xb4>
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	91 ee       	ldi	r25, 0xE1	; 225
    10d4:	e4 e0       	ldi	r30, 0x04	; 4
    10d6:	81 50       	subi	r24, 0x01	; 1
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	e0 40       	sbci	r30, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <main+0x62>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <main+0x6c>
    10e0:	00 00       	nop
    10e2:	8d 9a       	sbi	0x11, 5	; 17
	{
		_delay_ms(100);
		LED(1);
    10e4:	ff ef       	ldi	r31, 0xFF	; 255
    10e6:	21 ee       	ldi	r18, 0xE1	; 225
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	f1 50       	subi	r31, 0x01	; 1
    10ec:	20 40       	sbci	r18, 0x00	; 0
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <main+0x76>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <main+0x80>
    10f4:	00 00       	nop
		_delay_ms(100);
		LED(0);
    10f6:	8d 98       	cbi	0x11, 5	; 17
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    10f8:	ec d0       	rcall	.+472    	; 0x12d2 <gpib_is_connected>
    10fa:	81 11       	cpse	r24, r1
    10fc:	e5 cf       	rjmp	.-54     	; 0x10c8 <main+0x54>
    10fe:	8d 98       	cbi	0x11, 5	; 17
		{
			LED(0);
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	e9 e6       	ldi	r30, 0x69	; 105
    1104:	f8 e1       	ldi	r31, 0x18	; 24
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	e0 40       	sbci	r30, 0x00	; 0
    110a:	f0 40       	sbci	r31, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <main+0x92>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <main+0x9c>
    1110:	00 00       	nop
    1112:	9c e0       	ldi	r25, 0x0C	; 12
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1114:	88 e1       	ldi	r24, 0x18	; 24
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	a8 95       	wdr
    111c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1126:	ff cf       	rjmp	.-2      	; 0x1126 <main+0xb2>
    1128:	f9 99       	sbic	0x1f, 1	; 31
		}
		check_bootloaderEntry();
	}; /* Identify the GPIB Address of the connected GPIB device */
	
	/* found a responsive GPIB address, now setup USB descriptor with *IDN? or ID? command response */
	eeprom_busy_wait();
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <main+0xb4>
	prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 b8 10 	call	0x2170	; 0x2170 <eeprom_read_byte>
    1134:	c8 2f       	mov	r28, r24
	if (identifyGpibDevice())
    1136:	d2 d8       	rcall	.-3676   	; 0x2dc <identifyGpibDevice>
    1138:	88 23       	and	r24, r24
    113a:	c9 f0       	breq	.+50     	; 0x116e <main+0xfa>
	{ /* received a string over GPIB => Store it in EEPROM, if it changed */
		uint8_t *pdat, i;
		
		/* update gpib address and usb string descriptor in eeprom */
		eeprom_update_if_changed(0, gpib_addr);
    113c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	f2 da       	rcall	.-2588   	; 0x72a <eeprom_update_if_changed>
    1146:	08 e7       	ldi	r16, 0x78	; 120
    1148:	11 e0       	ldi	r17, 0x01	; 1
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	d0 e0       	ldi	r29, 0x00	; 0
		pdat = (void *)&tmc_serial_string;
		for (i=0; i<sizeof(tmc_serial_string); i++)
		{
			eeprom_update_if_changed(1+i, *pdat++);
    114e:	f8 01       	movw	r30, r16
    1150:	61 91       	ld	r22, Z+
    1152:	8f 01       	movw	r16, r30
    1154:	21 96       	adiw	r28, 0x01	; 1
    1156:	ce 01       	movw	r24, r28
    1158:	e8 da       	rcall	.-2608   	; 0x72a <eeprom_update_if_changed>
    115a:	c6 36       	cpi	r28, 0x66	; 102
		uint8_t *pdat, i;
		
		/* update gpib address and usb string descriptor in eeprom */
		eeprom_update_if_changed(0, gpib_addr);
		pdat = (void *)&tmc_serial_string;
		for (i=0; i<sizeof(tmc_serial_string); i++)
    115c:	d1 05       	cpc	r29, r1
    115e:	b9 f7       	brne	.-18     	; 0x114e <main+0xda>
    1160:	8d 9a       	sbi	0x11, 5	; 17
			
		}
	}

	/* all fine, now kickoff connect to USB to be able to communicate! */
	LED(1);
    1162:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <main+0x120>
			eeprom_update_if_changed(1+i, *pdat++);
		}
	}
	else
	{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
		if (prevaddr == gpib_addr)
    116e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
    1172:	c8 13       	cpse	r28, r24
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <main+0xec>
    1176:	08 e7       	ldi	r16, 0x78	; 120
    1178:	11 e0       	ldi	r17, 0x01	; 1
    117a:	c1 e0       	ldi	r28, 0x01	; 1
    117c:	d0 e0       	ldi	r29, 0x00	; 0

			/* update gpib address and usb string descriptor in eeprom */
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
			{
				*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    117e:	ce 01       	movw	r24, r28
    1180:	f7 d7       	rcall	.+4078   	; 0x2170 <eeprom_read_byte>
    1182:	f8 01       	movw	r30, r16
    1184:	81 93       	st	Z+, r24
		{
			uint8_t *pdat, i;

			/* update gpib address and usb string descriptor in eeprom */
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
    1186:	8f 01       	movw	r16, r30
    1188:	21 96       	adiw	r28, 0x01	; 1
    118a:	c7 36       	cpi	r28, 0x67	; 103
    118c:	d1 05       	cpc	r29, r1
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		
		USB_USBTask();
    118e:	b9 f7       	brne	.-18     	; 0x117e <main+0x10a>
    1190:	e7 cf       	rjmp	.-50     	; 0x1160 <main+0xec>
	LED(1);
	USB_Attach();
	
	for (;;)
	{
		TMC_Task();
    1192:	bf d7       	rcall	.+3966   	; 0x2112 <USB_USBTask>
    1194:	aa dd       	rcall	.-1196   	; 0xcea <TMC_Task>
		
		check_bootloaderEntry();
    1196:	c6 da       	rcall	.-2676   	; 0x724 <check_bootloaderEntry>
    1198:	9c d0       	rcall	.+312    	; 0x12d2 <gpib_is_connected>
		
		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    119a:	81 11       	cpse	r24, r1
    119c:	fa cf       	rjmp	.-12     	; 0x1192 <main+0x11e>
    119e:	8d 98       	cbi	0x11, 5	; 17
    11a0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    11aa:	ff ef       	ldi	r31, 0xFF	; 255
    11ac:	29 e6       	ldi	r18, 0x69	; 105
    11ae:	88 e1       	ldi	r24, 0x18	; 24
    11b0:	f1 50       	subi	r31, 0x01	; 1
    11b2:	20 40       	sbci	r18, 0x00	; 0
    11b4:	80 40       	sbci	r24, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0x13c>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <main+0x146>
    11ba:	00 00       	nop
    11bc:	9c e0       	ldi	r25, 0x0C	; 12
    11be:	88 e1       	ldi	r24, 0x18	; 24
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	a8 95       	wdr
    11c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11d0:	ff cf       	rjmp	.-2      	; 0x11d0 <main+0x15c>

000011d2 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    11d2:	f9 01       	movw	r30, r18
    11d4:	10 82       	st	Z, r1

	switch (DescriptorType)
    11d6:	69 2f       	mov	r22, r25
    11d8:	77 27       	eor	r23, r23
    11da:	62 30       	cpi	r22, 0x02	; 2
    11dc:	71 05       	cpc	r23, r1
    11de:	59 f0       	breq	.+22     	; 0x11f6 <CALLBACK_USB_GetDescriptor+0x24>
    11e0:	63 30       	cpi	r22, 0x03	; 3
    11e2:	71 05       	cpc	r23, r1
    11e4:	69 f0       	breq	.+26     	; 0x1200 <CALLBACK_USB_GetDescriptor+0x2e>
    11e6:	61 30       	cpi	r22, 0x01	; 1
    11e8:	71 05       	cpc	r23, r1
    11ea:	49 f5       	brne	.+82     	; 0x123e <CALLBACK_USB_GetDescriptor+0x6c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    11ec:	82 e1       	ldi	r24, 0x12	; 18
    11ee:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	31 e0       	ldi	r19, 0x01	; 1
    11f4:	28 c0       	rjmp	.+80     	; 0x1246 <CALLBACK_USB_GetDescriptor+0x74>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    11f6:	87 e2       	ldi	r24, 0x27	; 39
    11f8:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    11fa:	2a ed       	ldi	r18, 0xDA	; 218
    11fc:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    11fe:	23 c0       	rjmp	.+70     	; 0x1246 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
    1200:	99 27       	eor	r25, r25
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	91 f0       	breq	.+36     	; 0x122c <CALLBACK_USB_GetDescriptor+0x5a>
    1208:	70 f0       	brcs	.+28     	; 0x1226 <CALLBACK_USB_GetDescriptor+0x54>
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	91 05       	cpc	r25, r1
    120e:	89 f0       	breq	.+34     	; 0x1232 <CALLBACK_USB_GetDescriptor+0x60>
    1210:	03 97       	sbiw	r24, 0x03	; 3
    1212:	a9 f4       	brne	.+42     	; 0x123e <CALLBACK_USB_GetDescriptor+0x6c>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
					Size = tmc_serial_string.Header.Size;
    1214:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tmc_serial_string>
    1218:	90 e0       	ldi	r25, 0x00	; 0
					*DescriptorMemorySpace = MEMSPACE_RAM;
    121a:	62 e0       	ldi	r22, 0x02	; 2
    121c:	f9 01       	movw	r30, r18
    121e:	60 83       	st	Z, r22
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
    1220:	28 e7       	ldi	r18, 0x78	; 120
    1222:	31 e0       	ldi	r19, 0x01	; 1
					Size = tmc_serial_string.Header.Size;
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
    1224:	10 c0       	rjmp	.+32     	; 0x1246 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1226:	e6 ed       	ldi	r30, 0xD6	; 214
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    122c:	ee eb       	ldi	r30, 0xBE	; 190
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1232:	ec ea       	ldi	r30, 0xAC	; 172
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	84 91       	lpm	r24, Z
    1238:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    123a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <CALLBACK_USB_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
			                        uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1246:	fa 01       	movw	r30, r20
    1248:	31 83       	std	Z+1, r19	; 0x01
    124a:	20 83       	st	Z, r18
	return Size;
}
    124c:	08 95       	ret

0000124e <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124e:	85 e3       	ldi	r24, 0x35	; 53
    1250:	8a 95       	dec	r24
    1252:	f1 f7       	brne	.-4      	; 0x1250 <is_timedout+0x2>
    1254:	00 00       	nop
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    1256:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <timeout_val>
    125a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <timeout_val+0x1>
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	39 f0       	breq	.+14     	; 0x1270 <is_timedout+0x22>
		return true;
		
	timeout_val--;
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timeout_val+0x1>
    1268:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timeout_val>
	return false;
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	08 95       	ret

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
    1270:	81 e0       	ldi	r24, 0x01	; 1
		
	timeout_val--;
	return false;
}
    1272:	08 95       	ret

00001274 <__vector_23>:
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	8f 93       	push	r24
	timer0_div++;
    1280:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timer0_div>
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timer0_div>
	if (timer0_div >= 6) /* are 100ms passed? */
    128a:	86 30       	cpi	r24, 0x06	; 6
    128c:	e0 f0       	brcs	.+56     	; 0x12c6 <__vector_23+0x52>
	{
		timer0_100mscounter++;
    128e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timer0_100mscounter>
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timer0_100mscounter>
		timer0_div = 0;
    1298:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <timer0_div>
		
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    129c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <s_gpib_transaction_active>
    12a0:	81 11       	cpse	r24, r1
    12a2:	11 c0       	rjmp	.+34     	; 0x12c6 <__vector_23+0x52>
		{
			if (!ATN_STATE) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    12a4:	7e 99       	sbic	0x0f, 6	; 15
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <__vector_23+0x48>
			{
				if (s_gpib_disconnect_counter == 2)
    12a8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <s_gpib_disconnect_counter>
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <__vector_23+0x40>
				{ /* after 100-200ms with ATN low, assume, that there is no GPIB device connected */
					s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <__vector_23+0x4e>
				}
				else
				{
					s_gpib_disconnect_counter++;
    12b4:	8f 5f       	subi	r24, 0xFF	; 255
    12b6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <s_gpib_disconnect_counter>
    12ba:	05 c0       	rjmp	.+10     	; 0x12c6 <__vector_23+0x52>
				}
			}
			else
			{ /* device is connected */
				s_gpib_disconnect_counter = 0;
    12bc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <s_gpib_disconnect_counter>
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <s_device_state>
			}
		}
	}
}
    12c6:	8f 91       	pop	r24
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <gpib_is_connected>:
	timer_init(); /* init timeout timer */
}

bool gpib_is_connected(void)
{
	return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <s_device_state>
    12d8:	92 30       	cpi	r25, 0x02	; 2
    12da:	09 f0       	breq	.+2      	; 0x12de <gpib_is_connected+0xc>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
}
    12de:	08 95       	ret

000012e0 <gpib_ren>:

void gpib_ren(bool enable)
{
	if (enable)
    12e0:	88 23       	and	r24, r24
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <gpib_ren+0x8>
	{
		REN_LOW; /* remote enable */
    12e4:	25 9a       	sbi	0x04, 5	; 4
    12e6:	08 95       	ret
	}
	else
	{
		REN_HIGH; /* remote disable */
    12e8:	25 98       	cbi	0x04, 5	; 4
    12ea:	08 95       	ret

000012ec <gpib_interface_clear>:



void gpib_interface_clear(void)
{
	IFC_LOW; /* interface clear */
    12ec:	6a 9a       	sbi	0x0d, 2	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ee:	2f ef       	ldi	r18, 0xFF	; 255
    12f0:	81 ee       	ldi	r24, 0xE1	; 225
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	21 50       	subi	r18, 0x01	; 1
    12f6:	80 40       	sbci	r24, 0x00	; 0
    12f8:	90 40       	sbci	r25, 0x00	; 0
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <gpib_interface_clear+0x8>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <gpib_interface_clear+0x12>
    12fe:	00 00       	nop
	_delay_ms(100);
	IFC_HIGH; /* interface clear */
    1300:	6a 98       	cbi	0x0d, 2	; 13
    1302:	8f e3       	ldi	r24, 0x3F	; 63
    1304:	9c e9       	ldi	r25, 0x9C	; 156
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <gpib_interface_clear+0x1a>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <gpib_interface_clear+0x20>
    130c:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    130e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <s_gpib_transaction_active>
    1312:	08 95       	ret

00001314 <gpib_init>:
 **********************************************************************************************************/

void gpib_init(void)
{
// PB5 = REN
	DDRD  = 0x00;
    1314:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    1316:	1b b8       	out	0x0b, r1	; 11
	PORTB &= ~((1<<4) | (1<<5) | (1<<6));
    1318:	85 b1       	in	r24, 0x05	; 5
    131a:	8f 78       	andi	r24, 0x8F	; 143
    131c:	85 b9       	out	0x05, r24	; 5
	DDRB  &= ~((1<<4) | (1<<5) | (1<<6));
    131e:	84 b1       	in	r24, 0x04	; 4
    1320:	8f 78       	andi	r24, 0x8F	; 143
    1322:	84 b9       	out	0x04, r24	; 4
	PORTC &= ~((1<<6) | (1<<7));
    1324:	88 b1       	in	r24, 0x08	; 8
    1326:	8f 73       	andi	r24, 0x3F	; 63
    1328:	88 b9       	out	0x08, r24	; 8
	DDRC  &= ~((1<<6) | (1<<7));
    132a:	87 b1       	in	r24, 0x07	; 7
    132c:	8f 73       	andi	r24, 0x3F	; 63
    132e:	87 b9       	out	0x07, r24	; 7
	PORTE &= ~(1<<2);
    1330:	72 98       	cbi	0x0e, 2	; 14
	DDRE  &= ~(1<<2);
    1332:	6a 98       	cbi	0x0d, 2	; 13
	PORTF &= ~((1<<6) | (1<<7));
    1334:	81 b3       	in	r24, 0x11	; 17
    1336:	8f 73       	andi	r24, 0x3F	; 63
    1338:	81 bb       	out	0x11, r24	; 17
	DDRF  &= ~((1<<6) | (1<<7));
    133a:	80 b3       	in	r24, 0x10	; 16
    133c:	8f 73       	andi	r24, 0x3F	; 63
    133e:	80 bb       	out	0x10, r24	; 16
	
	DDRB |= (1<<5); /* remote enable */
    1340:	25 9a       	sbi	0x04, 5	; 4

	s_gpib_transaction_active = false;
    1342:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <s_gpib_transaction_active>
	s_gpib_disconnect_counter = 0;
    1346:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <s_gpib_disconnect_counter>
	
	gpib_interface_clear();
    134a:	d0 df       	rcall	.-96     	; 0x12ec <gpib_interface_clear>
}
*/

static void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    134c:	85 e0       	ldi	r24, 0x05	; 5
    134e:	85 bd       	out	0x25, r24	; 37
	// Overflow Interrupt erlauben
	TIMSK0 |= (1<<TOIE0);
    1350:	ee e6       	ldi	r30, 0x6E	; 110
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
	timer0_div = 0;
    135a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <timer0_div>
	timer0_100mscounter = 0;
    135e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <timer0_100mscounter>
    1362:	08 95       	ret

00001364 <gpib_tx>:
{
	gpib_init();
}

static bool gpib_tx(uint8_t dat, bool iscommand, gpibtimeout_t ptimeoutfunc)
{
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	8a 01       	movw	r16, r20
	bool timedout;
	
	DAV_HIGH;
    136c:	26 98       	cbi	0x04, 6	; 4
	NRFD_HIGH;
    136e:	3e 98       	cbi	0x07, 6	; 7
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1370:	3f 98       	cbi	0x07, 7	; 7
	
	if (iscommand)
    1372:	66 23       	and	r22, r22
    1374:	11 f0       	breq	.+4      	; 0x137a <gpib_tx+0x16>
		ATN_LOW;
    1376:	86 9a       	sbi	0x10, 6	; 16
    1378:	01 c0       	rjmp	.+2      	; 0x137c <gpib_tx+0x18>
	else
		ATN_HIGH;
    137a:	86 98       	cbi	0x10, 6	; 16

	DDRD = dat;   /* set Data to data bus */
    137c:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    137e:	85 e0       	ldi	r24, 0x05	; 5
    1380:	8a 95       	dec	r24
    1382:	f1 f7       	brne	.-4      	; 0x1380 <gpib_tx+0x1c>
    1384:	00 00       	nop
	_delay_us(1); /* wait for data to settle */
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		timedout = ptimeoutfunc();
    1386:	f8 01       	movw	r30, r16
    1388:	09 95       	icall
    138a:	c8 2f       	mov	r28, r24
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    138c:	36 99       	sbic	0x06, 6	; 6
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <gpib_tx+0x32>
    1390:	88 23       	and	r24, r24
    1392:	c9 f3       	breq	.-14     	; 0x1386 <gpib_tx+0x22>
    1394:	0b c0       	rjmp	.+22     	; 0x13ac <gpib_tx+0x48>

	if (!timedout)
    1396:	81 11       	cpse	r24, r1
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <gpib_tx+0x48>
	{
		DAV_LOW;
    139a:	26 9a       	sbi	0x04, 6	; 4
		do
		{
			timedout = ptimeoutfunc();
    139c:	f8 01       	movw	r30, r16
    139e:	09 95       	icall
    13a0:	c8 2f       	mov	r28, r24
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    13a2:	37 99       	sbic	0x06, 7	; 6
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <gpib_tx+0x46>
    13a6:	88 23       	and	r24, r24
    13a8:	c9 f3       	breq	.-14     	; 0x139c <gpib_tx+0x38>
		DAV_HIGH; 
    13aa:	26 98       	cbi	0x04, 6	; 4
	}
	
	DDRD = 0x00; /* release data bus */
    13ac:	1a b8       	out	0x0a, r1	; 10
	ATN_HIGH;	 
    13ae:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    13b0:	c1 11       	cpse	r28, r1
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    13b2:	b0 df       	rcall	.-160    	; 0x1314 <gpib_init>
	if (timedout)
	{
		gpib_recover();
	}
	return timedout;
}
    13b4:	8c 2f       	mov	r24, r28
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <gpib_cmd_TAG>:
	return gpib_tx(addr | 0x60, true, ptimeoutfunc);
}


static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	c8 2f       	mov	r28, r24
    13c6:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    13c8:	8f 71       	andi	r24, 0x1F	; 31
    13ca:	ab 01       	movw	r20, r22
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	80 64       	ori	r24, 0x40	; 64
    13d0:	c9 df       	rcall	.-110    	; 0x1364 <gpib_tx>
	if (addr & 0xe0)
    13d2:	c0 7e       	andi	r28, 0xE0	; 224
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <gpib_cmd_TAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    13d6:	a8 01       	movw	r20, r16
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    13e0:	0f 91       	pop	r16
    13e2:	c0 cf       	rjmp	.-128    	; 0x1364 <gpib_tx>
	}
	return result;
}
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <gpib_cmd_LAG>:
	return gpib_tx(dat, false, ptimeoutfunc);
}


static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	c8 2f       	mov	r28, r24
    13f4:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    13f6:	8f 71       	andi	r24, 0x1F	; 31
    13f8:	ab 01       	movw	r20, r22
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	80 62       	ori	r24, 0x20	; 32
    13fe:	b2 df       	rcall	.-156    	; 0x1364 <gpib_tx>
	if (addr & 0xe0)
    1400:	c0 7e       	andi	r28, 0xE0	; 224
    1402:	39 f0       	breq	.+14     	; 0x1412 <gpib_cmd_LAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    1404:	a8 01       	movw	r20, r16
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    140e:	0f 91       	pop	r16
    1410:	a9 cf       	rjmp	.-174    	; 0x1364 <gpib_tx>
	}
	return result;
}
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <gpib_cmd_UNL>:
	return result;
}

static bool gpib_cmd_UNL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x3F, true, ptimeoutfunc);
    141a:	ac 01       	movw	r20, r24
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	8f e3       	ldi	r24, 0x3F	; 63
    1420:	a1 cf       	rjmp	.-190    	; 0x1364 <gpib_tx>

00001422 <gpib_trigger>:

}


bool gpib_trigger(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1428:	e1 df       	rcall	.-62     	; 0x13ec <gpib_cmd_LAG>
	if (!timedout)
    142a:	81 11       	cpse	r24, r1
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <gpib_trigger+0x20>
	return gpib_tx(0x19, true, ptimeoutfunc);
}

static bool gpib_cmd_GET(gpibtimeout_t ptimeoutfunc) // group execute trigger (addressed command)
{
	return gpib_tx(0x08, true, ptimeoutfunc);
    142e:	ae 01       	movw	r20, r28
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	97 df       	rcall	.-210    	; 0x1364 <gpib_tx>
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GET(ptimeoutfunc);
	if (!timedout)
    1436:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <gpib_trigger+0x20>
    143a:	ce 01       	movw	r24, r28
		
	if (timedout)
    143c:	ee df       	rcall	.-36     	; 0x141a <gpib_cmd_UNL>
    143e:	88 23       	and	r24, r24
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    1440:	11 f0       	breq	.+4      	; 0x1446 <gpib_trigger+0x24>
    1442:	68 df       	rcall	.-304    	; 0x1314 <gpib_init>
    1444:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <gpib_gotoLocal>:
		gpib_recover();
	return timedout;
}

bool gpib_gotoLocal(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1452:	cc df       	rcall	.-104    	; 0x13ec <gpib_cmd_LAG>
	if (!timedout)
    1454:	81 11       	cpse	r24, r1
    1456:	09 c0       	rjmp	.+18     	; 0x146a <gpib_gotoLocal+0x1e>
	return gpib_tx(0x11, true, ptimeoutfunc);
}

static bool gpib_cmd_GTL(gpibtimeout_t ptimeoutfunc) // goto local
{
	return gpib_tx(0x01, true, ptimeoutfunc);
    1458:	ae 01       	movw	r20, r28
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	82 df       	rcall	.-252    	; 0x1364 <gpib_tx>
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GTL(ptimeoutfunc);
		
	if (!timedout)
    1460:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1462:	03 c0       	rjmp	.+6      	; 0x146a <gpib_gotoLocal+0x1e>
    1464:	ce 01       	movw	r24, r28
		
	if (timedout)
    1466:	d9 df       	rcall	.-78     	; 0x141a <gpib_cmd_UNL>
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    1468:	81 11       	cpse	r24, r1
    146a:	54 df       	rcall	.-344    	; 0x1314 <gpib_init>
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();

}
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <gpib_localLockout>:
		gpib_recover();	
	return status;
}

bool gpib_localLockout(gpibtimeout_t ptimeoutfunc)
{
    1474:	cf 93       	push	r28
	return gpib_tx(0x5F, true, ptimeoutfunc);
}

static bool gpib_cmd_LLO(gpibtimeout_t ptimeoutfunc) // local lockout
{
	return gpib_tx(0x11, true, ptimeoutfunc);
    1476:	ac 01       	movw	r20, r24
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	81 e1       	ldi	r24, 0x11	; 17
    147c:	73 df       	rcall	.-282    	; 0x1364 <gpib_tx>
    147e:	c8 2f       	mov	r28, r24
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    1480:	81 11       	cpse	r24, r1
    1482:	48 df       	rcall	.-368    	; 0x1314 <gpib_init>

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    1484:	8c 2f       	mov	r24, r28
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <gpib_readdat>:




uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	5c 01       	movw	r10, r24
    149e:	6b 01       	movw	r12, r22
    14a0:	7a 01       	movw	r14, r20
	
	c = 0;
	eoi = false;	
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    14a2:	3f 9a       	sbi	0x07, 7	; 7
	NRFD_HIGH;
    14a4:	3e 98       	cbi	0x07, 6	; 7
	
	do
	{
		timedout = ptimeoutfunc();
    14a6:	f7 01       	movw	r30, r14
    14a8:	09 95       	icall
    14aa:	c8 2f       	mov	r28, r24
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    14ac:	1e 9b       	sbis	0x03, 6	; 3
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <gpib_readdat+0x2c>
    14b0:	88 23       	and	r24, r24
    14b2:	c9 f3       	breq	.-14     	; 0x14a6 <gpib_readdat+0x1c>
    14b4:	13 c0       	rjmp	.+38     	; 0x14dc <gpib_readdat+0x52>
	
	if (!timedout)
    14b6:	81 11       	cpse	r24, r1
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <gpib_readdat+0x52>
	{
		NRFD_LOW;
    14ba:	3e 9a       	sbi	0x07, 6	; 7
		c = ~PIND;
    14bc:	d9 b1       	in	r29, 0x09	; 9
    14be:	d0 95       	com	r29
		eoi = (EOI_STATE == 0) ;
    14c0:	13 b1       	in	r17, 0x03	; 3
    14c2:	12 95       	swap	r17
    14c4:	11 70       	andi	r17, 0x01	; 1
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	18 27       	eor	r17, r24
		NDAC_HIGH;
    14ca:	3f 98       	cbi	0x07, 7	; 7
		
		do
		{
			timedout = ptimeoutfunc();
    14cc:	f7 01       	movw	r30, r14
    14ce:	09 95       	icall
    14d0:	c8 2f       	mov	r28, r24
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    14d2:	1e 99       	sbic	0x03, 6	; 3
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <gpib_readdat+0x56>
    14d6:	88 23       	and	r24, r24
    14d8:	c9 f3       	breq	.-14     	; 0x14cc <gpib_readdat+0x42>
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <gpib_readdat+0x56>
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
	eoi = false;	
    14dc:	10 e0       	ldi	r17, 0x00	; 0
uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
    14de:	d0 e0       	ldi	r29, 0x00	; 0
			timedout = ptimeoutfunc();
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	*pEoi = eoi;
    14e0:	f5 01       	movw	r30, r10
    14e2:	10 83       	st	Z, r17
	if (timedout)
    14e4:	c1 11       	cpse	r28, r1
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    14e6:	16 df       	rcall	.-468    	; 0x1314 <gpib_init>
	*pEoi = eoi;
	if (timedout)
	{
		gpib_recover();
	}
	*ptimedout = timedout;
    14e8:	f6 01       	movw	r30, r12
    14ea:	c0 83       	st	Z, r28
	return c;
};
    14ec:	8d 2f       	mov	r24, r29
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	08 95       	ret

00001502 <gpib_readStatusByte>:
}



uint8_t gpib_readStatusByte(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	00 d0       	rcall	.+0      	; 0x150e <gpib_readStatusByte+0xc>
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	f8 2e       	mov	r15, r24
    1514:	8b 01       	movw	r16, r22
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
    1516:	1a 82       	std	Y+2, r1	; 0x02
}


static bool gpib_cmd_SPE(gpibtimeout_t ptimeoutfunc) // serial poll enable
{
	return gpib_tx(0x18, true, ptimeoutfunc);
    1518:	ab 01       	movw	r20, r22
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	88 e1       	ldi	r24, 0x18	; 24
    151e:	22 df       	rcall	.-444    	; 0x1364 <gpib_tx>
	
	timedout = false;
	status = 0;
	
	if (!timedout)
		timedout = gpib_cmd_SPE(ptimeoutfunc);
    1520:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    1522:	81 11       	cpse	r24, r1
    1524:	04 c0       	rjmp	.+8      	; 0x152e <gpib_readStatusByte+0x2c>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    1526:	b8 01       	movw	r22, r16
    1528:	8f 2d       	mov	r24, r15
    152a:	49 df       	rcall	.-366    	; 0x13be <gpib_cmd_TAG>
    152c:	8a 83       	std	Y+2, r24	; 0x02
	ATN_HIGH; /* make ATN H */	
    152e:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
    1530:	3f 9a       	sbi	0x07, 7	; 7

	if (!timedout)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	81 11       	cpse	r24, r1
    1536:	09 c0       	rjmp	.+18     	; 0x154a <gpib_readStatusByte+0x48>
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
    1538:	a8 01       	movw	r20, r16
    153a:	be 01       	movw	r22, r28
    153c:	6e 5f       	subi	r22, 0xFE	; 254
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	a2 df       	rcall	.-188    	; 0x148a <gpib_readdat>
    1546:	f8 2e       	mov	r15, r24
    1548:	01 c0       	rjmp	.+2      	; 0x154c <gpib_readStatusByte+0x4a>
{
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
	status = 0;
    154a:	f1 2c       	mov	r15, r1
	NDAC_LOW;   /* make NDAC L */

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	81 11       	cpse	r24, r1
    1550:	05 c0       	rjmp	.+10     	; 0x155c <gpib_readStatusByte+0x5a>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1552:	a8 01       	movw	r20, r16
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	8f e5       	ldi	r24, 0x5F	; 95
    1558:	05 df       	rcall	.-502    	; 0x1364 <gpib_tx>

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
    155a:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	81 11       	cpse	r24, r1
	return gpib_tx(0x18, true, ptimeoutfunc);
}

static bool gpib_cmd_SPD(gpibtimeout_t ptimeoutfunc) // serial poll disable
{
	return gpib_tx(0x19, true, ptimeoutfunc);
    1560:	05 c0       	rjmp	.+10     	; 0x156c <gpib_readStatusByte+0x6a>
    1562:	a8 01       	movw	r20, r16
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	89 e1       	ldi	r24, 0x19	; 25
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
    1568:	fd de       	rcall	.-518    	; 0x1364 <gpib_tx>
	if (timedout)
    156a:	8a 83       	std	Y+2, r24	; 0x02
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    156e:	81 11       	cpse	r24, r1
    1570:	d1 de       	rcall	.-606    	; 0x1314 <gpib_init>
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
	if (timedout)
		gpib_recover();	
	return status;
}
    1572:	8f 2d       	mov	r24, r15
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	08 95       	ret

00001584 <gpib_untalk_unlisten>:
	*ptimedout = timedout;
	return c;
};

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    158a:	47 df       	rcall	.-370    	; 0x141a <gpib_cmd_UNL>
	if (!timedout)
    158c:	88 23       	and	r24, r24
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    158e:	19 f0       	breq	.+6      	; 0x1596 <gpib_untalk_unlisten+0x12>
    1590:	c1 de       	rcall	.-638    	; 0x1314 <gpib_init>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <gpib_untalk_unlisten+0x1e>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1596:	ae 01       	movw	r20, r28
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	8f e5       	ldi	r24, 0x5F	; 95
    159c:	e3 de       	rcall	.-570    	; 0x1364 <gpib_tx>
{
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
    159e:	81 11       	cpse	r24, r1
    15a0:	f7 cf       	rjmp	.-18     	; 0x1590 <gpib_untalk_unlisten+0xc>
		gpib_recover();
		
	s_gpib_transaction_active = false;
    15a2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <s_gpib_transaction_active>
	return timedout;
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <gpib_make_talker>:

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	d8 2f       	mov	r29, r24
    15b6:	8b 01       	movw	r16, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <s_gpib_transaction_active>
	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    15be:	cb 01       	movw	r24, r22
    15c0:	2c df       	rcall	.-424    	; 0x141a <gpib_cmd_UNL>
    15c2:	c8 2f       	mov	r28, r24
	if (!timedout)
    15c4:	81 11       	cpse	r24, r1
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <gpib_make_talker+0x24>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    15c8:	b8 01       	movw	r22, r16
    15ca:	8d 2f       	mov	r24, r29
    15cc:	f8 de       	rcall	.-528    	; 0x13be <gpib_cmd_TAG>
    15ce:	c8 2f       	mov	r28, r24
	ATN_HIGH; /* make ATN H */	
    15d0:	86 98       	cbi	0x10, 6	; 16
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
    15d2:	3f 9a       	sbi	0x07, 7	; 7
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    15d4:	c1 11       	cpse	r28, r1
    15d6:	9e de       	rcall	.-708    	; 0x1314 <gpib_init>
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    15d8:	8c 2f       	mov	r24, r28
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <gpib_make_listener>:

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	18 2f       	mov	r17, r24
    15ec:	eb 01       	movw	r28, r22
	bool timedout;
	s_gpib_transaction_active = true;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <s_gpib_transaction_active>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    15f4:	ab 01       	movw	r20, r22
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	8f e5       	ldi	r24, 0x5F	; 95
    15fa:	b4 de       	rcall	.-664    	; 0x1364 <gpib_tx>
bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
    15fc:	88 23       	and	r24, r24
    15fe:	11 f0       	breq	.+4      	; 0x1604 <gpib_make_listener+0x20>
		gpib_recover();
	return timedout;
}

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1600:	c1 e0       	ldi	r28, 0x01	; 1
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <gpib_make_listener+0x30>
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1604:	ce 01       	movw	r24, r28
    1606:	09 df       	rcall	.-494    	; 0x141a <gpib_cmd_UNL>
	if (!timedout)
    1608:	81 11       	cpse	r24, r1
    160a:	fa cf       	rjmp	.-12     	; 0x1600 <gpib_make_listener+0x1c>
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    160c:	be 01       	movw	r22, r28
    160e:	81 2f       	mov	r24, r17
    1610:	ed de       	rcall	.-550    	; 0x13ec <gpib_cmd_LAG>
    1612:	c8 2f       	mov	r28, r24
		
	ATN_HIGH;    /* make ATN H */
    1614:	86 98       	cbi	0x10, 6	; 16
	
	if (timedout)
    1616:	c1 11       	cpse	r28, r1
static uint8_t s_gpib_disconnect_counter;
static volatile bool     s_gpib_transaction_active = false; /* TRUE, if a device is addressed as talker or listener */
 
static void gpib_recover(void)
{
	gpib_init();
    1618:	7d de       	rcall	.-774    	; 0x1314 <gpib_init>
    161a:	8c 2f       	mov	r24, r28
	ATN_HIGH;    /* make ATN H */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	08 95       	ret

00001624 <gpib_writedat>:
    1624:	61 11       	cpse	r22, r1
bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
    1626:	24 9a       	sbi	0x04, 4	; 4
	return timedout;
}

static bool gpib_dat(uint8_t dat, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(dat, false, ptimeoutfunc);
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	9c de       	rcall	.-712    	; 0x1364 <gpib_tx>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_dat(dat, ptimeoutfunc);
	EOI_HIGH;    /* make EOI H */
    162c:	24 98       	cbi	0x04, 4	; 4
	return timedout;
}
    162e:	08 95       	ret

00001630 <gpib_search>:
	timeout_val--;
	return false;
}

uint8_t gpib_search(void)
{
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    163a:	84 ef       	ldi	r24, 0xF4	; 244
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timeout_val+0x1>
    1642:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timeout_val>
uint8_t gpib_search(void)
{
	uint8_t addr, foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    1646:	47 e2       	ldi	r20, 0x27	; 39
    1648:	59 e0       	ldi	r21, 0x09	; 9
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	8f e3       	ldi	r24, 0x3F	; 63
    164e:	8a de       	rcall	.-748    	; 0x1364 <gpib_tx>
	
	foundaddr = 255;
	addr = 255;
    1650:	cf ef       	ldi	r28, 0xFF	; 255

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1652:	84 ef       	ldi	r24, 0xF4	; 244
    1654:	e8 2e       	mov	r14, r24
    1656:	ff 24       	eor	r15, r15
    1658:	f3 94       	inc	r15
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    165a:	cf 5f       	subi	r28, 0xFF	; 255
    165c:	1c 2f       	mov	r17, r28
    165e:	1f 71       	andi	r17, 0x1F	; 31
		if ((addr & 0x1f) != 31)
    1660:	1f 31       	cpi	r17, 0x1F	; 31
    1662:	09 f4       	brne	.+2      	; 0x1666 <gpib_search+0x36>
    1664:	3c c0       	rjmp	.+120    	; 0x16de <gpib_search+0xae>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1666:	f0 92 6d 01 	sts	0x016D, r15	; 0x80016d <timeout_val+0x1>
    166a:	e0 92 6c 01 	sts	0x016C, r14	; 0x80016c <timeout_val>
	
		addr++;
		if ((addr & 0x1f) != 31)
		{
			timeout_start(500);
			gpib_cmd_LAG(addr, is_timedout);
    166e:	67 e2       	ldi	r22, 0x27	; 39
    1670:	79 e0       	ldi	r23, 0x09	; 9
    1672:	8c 2f       	mov	r24, r28
    1674:	bb de       	rcall	.-650    	; 0x13ec <gpib_cmd_LAG>
			
			ATN_HIGH; /* make ATN H */
    1676:	86 98       	cbi	0x10, 6	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1678:	8f e3       	ldi	r24, 0x3F	; 63
    167a:	9f e1       	ldi	r25, 0x1F	; 31
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <gpib_search+0x4c>
    1680:	00 c0       	rjmp	.+0      	; 0x1682 <gpib_search+0x52>
    1682:	00 00       	nop
			_delay_ms(2);
			if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    1684:	37 99       	sbic	0x06, 7	; 6
    1686:	2b c0       	rjmp	.+86     	; 0x16de <gpib_search+0xae>
    1688:	7e 9b       	sbis	0x0f, 6	; 15
    168a:	29 c0       	rjmp	.+82     	; 0x16de <gpib_search+0xae>
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    168c:	dc 2f       	mov	r29, r28

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    168e:	84 ef       	ldi	r24, 0xF4	; 244
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timeout_val+0x1>
    1696:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timeout_val>
		
	}
	while ( (addr < 63) && (foundaddr == 255));
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    169a:	47 e2       	ldi	r20, 0x27	; 39
    169c:	59 e0       	ldi	r21, 0x09	; 9
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	8f e3       	ldi	r24, 0x3F	; 63
    16a2:	60 de       	rcall	.-832    	; 0x1364 <gpib_tx>
	
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
    16a4:	c0 32       	cpi	r28, 0x20	; 32
    16a6:	00 f1       	brcs	.+64     	; 0x16e8 <gpib_search+0xb8>
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    16a8:	67 e2       	ldi	r22, 0x27	; 39
    16aa:	79 e0       	ldi	r23, 0x09	; 9
    16ac:	81 2f       	mov	r24, r17
    16ae:	9e de       	rcall	.-708    	; 0x13ec <gpib_cmd_LAG>
		ATN_HIGH; /* make ATN H */
    16b0:	86 98       	cbi	0x10, 6	; 16
    16b2:	8f e3       	ldi	r24, 0x3F	; 63
    16b4:	9f e1       	ldi	r25, 0x1F	; 31
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <gpib_search+0x86>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <gpib_search+0x8c>
    16bc:	00 00       	nop
		_delay_ms(2);
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    16be:	37 99       	sbic	0x06, 7	; 6
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <gpib_search+0x96>
    16c2:	7e 99       	sbic	0x0f, 6	; 15
    16c4:	d1 2f       	mov	r29, r17

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    16c6:	84 ef       	ldi	r24, 0xF4	; 244
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <timeout_val+0x1>
    16ce:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <timeout_val>
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
		{
			foundaddr = addr & 0x1f;
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
    16d2:	47 e2       	ldi	r20, 0x27	; 39
    16d4:	59 e0       	ldi	r21, 0x09	; 9
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	8f e3       	ldi	r24, 0x3F	; 63
    16da:	44 de       	rcall	.-888    	; 0x1364 <gpib_tx>
	}
	
	//return 1;
		
	return foundaddr;
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <gpib_search+0xb8>
				foundaddr = addr;
			}
		}
		
	}
	while ( (addr < 63) && (foundaddr == 255));
    16de:	cf 33       	cpi	r28, 0x3F	; 63
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <gpib_search+0xb4>
    16e2:	bb cf       	rjmp	.-138    	; 0x165a <gpib_search+0x2a>
    16e4:	df ef       	ldi	r29, 0xFF	; 255
    16e6:	d3 cf       	rjmp	.-90     	; 0x168e <gpib_search+0x5e>
	}
	
	//return 1;
		
	return foundaddr;
}
    16e8:	8d 2f       	mov	r24, r29
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	ec 01       	movw	r28, r24
    1708:	8b 01       	movw	r16, r22
    170a:	7a 01       	movw	r14, r20
    170c:	12 d2       	rcall	.+1060   	; 0x1b32 <Endpoint_WaitUntilReady>
    170e:	81 11       	cpse	r24, r1
    1710:	32 c0       	rjmp	.+100    	; 0x1776 <Endpoint_Write_Stream_LE+0x80>
    1712:	e1 14       	cp	r14, r1
    1714:	f1 04       	cpc	r15, r1
    1716:	39 f0       	breq	.+14     	; 0x1726 <Endpoint_Write_Stream_LE+0x30>
    1718:	f7 01       	movw	r30, r14
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	08 1b       	sub	r16, r24
    1720:	19 0b       	sbc	r17, r25
    1722:	c8 0f       	add	r28, r24
    1724:	d9 1f       	adc	r29, r25
    1726:	c1 2c       	mov	r12, r1
    1728:	d1 2c       	mov	r13, r1
    172a:	01 15       	cp	r16, r1
    172c:	11 05       	cpc	r17, r1
    172e:	11 f1       	breq	.+68     	; 0x1774 <Endpoint_Write_Stream_LE+0x7e>
    1730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1734:	85 fd       	sbrc	r24, 5
    1736:	15 c0       	rjmp	.+42     	; 0x1762 <Endpoint_Write_Stream_LE+0x6c>
    1738:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    173c:	8e 77       	andi	r24, 0x7E	; 126
    173e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1742:	e1 14       	cp	r14, r1
    1744:	f1 04       	cpc	r15, r1
    1746:	49 f0       	breq	.+18     	; 0x175a <Endpoint_Write_Stream_LE+0x64>
    1748:	f7 01       	movw	r30, r14
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	c8 0e       	add	r12, r24
    1750:	d9 1e       	adc	r13, r25
    1752:	d1 82       	std	Z+1, r13	; 0x01
    1754:	c0 82       	st	Z, r12
    1756:	85 e0       	ldi	r24, 0x05	; 5
    1758:	0e c0       	rjmp	.+28     	; 0x1776 <Endpoint_Write_Stream_LE+0x80>
    175a:	eb d1       	rcall	.+982    	; 0x1b32 <Endpoint_WaitUntilReady>
    175c:	88 23       	and	r24, r24
    175e:	29 f3       	breq	.-54     	; 0x172a <Endpoint_Write_Stream_LE+0x34>
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <Endpoint_Write_Stream_LE+0x80>
    1762:	89 91       	ld	r24, Y+
    1764:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1768:	01 50       	subi	r16, 0x01	; 1
    176a:	11 09       	sbc	r17, r1
    176c:	ff ef       	ldi	r31, 0xFF	; 255
    176e:	cf 1a       	sub	r12, r31
    1770:	df 0a       	sbc	r13, r31
    1772:	db cf       	rjmp	.-74     	; 0x172a <Endpoint_Write_Stream_LE+0x34>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	08 95       	ret

00001788 <Endpoint_Read_Stream_LE>:
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	8b 01       	movw	r16, r22
    179c:	7a 01       	movw	r14, r20
    179e:	c9 d1       	rcall	.+914    	; 0x1b32 <Endpoint_WaitUntilReady>
    17a0:	81 11       	cpse	r24, r1
    17a2:	32 c0       	rjmp	.+100    	; 0x1808 <Endpoint_Read_Stream_LE+0x80>
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <Endpoint_Read_Stream_LE+0x30>
    17aa:	f7 01       	movw	r30, r14
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	08 1b       	sub	r16, r24
    17b2:	19 0b       	sbc	r17, r25
    17b4:	c8 0f       	add	r28, r24
    17b6:	d9 1f       	adc	r29, r25
    17b8:	c1 2c       	mov	r12, r1
    17ba:	d1 2c       	mov	r13, r1
    17bc:	01 15       	cp	r16, r1
    17be:	11 05       	cpc	r17, r1
    17c0:	11 f1       	breq	.+68     	; 0x1806 <Endpoint_Read_Stream_LE+0x7e>
    17c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c6:	85 fd       	sbrc	r24, 5
    17c8:	15 c0       	rjmp	.+42     	; 0x17f4 <Endpoint_Read_Stream_LE+0x6c>
    17ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ce:	8b 77       	andi	r24, 0x7B	; 123
    17d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17d4:	e1 14       	cp	r14, r1
    17d6:	f1 04       	cpc	r15, r1
    17d8:	49 f0       	breq	.+18     	; 0x17ec <Endpoint_Read_Stream_LE+0x64>
    17da:	f7 01       	movw	r30, r14
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	c8 0e       	add	r12, r24
    17e2:	d9 1e       	adc	r13, r25
    17e4:	d1 82       	std	Z+1, r13	; 0x01
    17e6:	c0 82       	st	Z, r12
    17e8:	85 e0       	ldi	r24, 0x05	; 5
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <Endpoint_Read_Stream_LE+0x80>
    17ec:	a2 d1       	rcall	.+836    	; 0x1b32 <Endpoint_WaitUntilReady>
    17ee:	88 23       	and	r24, r24
    17f0:	29 f3       	breq	.-54     	; 0x17bc <Endpoint_Read_Stream_LE+0x34>
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <Endpoint_Read_Stream_LE+0x80>
    17f4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17f8:	89 93       	st	Y+, r24
    17fa:	01 50       	subi	r16, 0x01	; 1
    17fc:	11 09       	sbc	r17, r1
    17fe:	ff ef       	ldi	r31, 0xFF	; 255
    1800:	cf 1a       	sub	r12, r31
    1802:	df 0a       	sbc	r13, r31
    1804:	db cf       	rjmp	.-74     	; 0x17bc <Endpoint_Read_Stream_LE+0x34>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	08 95       	ret

0000181a <Endpoint_Write_Control_Stream_LE>:
    181a:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x6>
    181e:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <USB_ControlRequest+0x7>
    1822:	26 17       	cp	r18, r22
    1824:	37 07       	cpc	r19, r23
    1826:	48 f0       	brcs	.+18     	; 0x183a <Endpoint_Write_Control_Stream_LE+0x20>
    1828:	61 15       	cp	r22, r1
    182a:	71 05       	cpc	r23, r1
    182c:	39 f4       	brne	.+14     	; 0x183c <Endpoint_Write_Control_Stream_LE+0x22>
    182e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1832:	2e 77       	andi	r18, 0x7E	; 126
    1834:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1838:	01 c0       	rjmp	.+2      	; 0x183c <Endpoint_Write_Control_Stream_LE+0x22>
    183a:	b9 01       	movw	r22, r18
    183c:	fc 01       	movw	r30, r24
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	61 15       	cp	r22, r1
    1842:	71 05       	cpc	r23, r1
    1844:	79 f1       	breq	.+94     	; 0x18a4 <Endpoint_Write_Control_Stream_LE+0x8a>
    1846:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    184a:	88 23       	and	r24, r24
    184c:	f1 f1       	breq	.+124    	; 0x18ca <Endpoint_Write_Control_Stream_LE+0xb0>
    184e:	85 30       	cpi	r24, 0x05	; 5
    1850:	f1 f1       	breq	.+124    	; 0x18ce <Endpoint_Write_Control_Stream_LE+0xb4>
    1852:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1856:	83 fd       	sbrc	r24, 3
    1858:	3c c0       	rjmp	.+120    	; 0x18d2 <Endpoint_Write_Control_Stream_LE+0xb8>
    185a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    185e:	82 fd       	sbrc	r24, 2
    1860:	2e c0       	rjmp	.+92     	; 0x18be <Endpoint_Write_Control_Stream_LE+0xa4>
    1862:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1866:	80 ff       	sbrs	r24, 0
    1868:	eb cf       	rjmp	.-42     	; 0x1840 <Endpoint_Write_Control_Stream_LE+0x26>
    186a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    186e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	92 2b       	or	r25, r18
    1876:	61 15       	cp	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	51 f0       	breq	.+20     	; 0x1890 <Endpoint_Write_Control_Stream_LE+0x76>
    187c:	88 30       	cpi	r24, 0x08	; 8
    187e:	91 05       	cpc	r25, r1
    1880:	38 f4       	brcc	.+14     	; 0x1890 <Endpoint_Write_Control_Stream_LE+0x76>
    1882:	21 91       	ld	r18, Z+
    1884:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1888:	61 50       	subi	r22, 0x01	; 1
    188a:	71 09       	sbc	r23, r1
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	f3 cf       	rjmp	.-26     	; 0x1876 <Endpoint_Write_Control_Stream_LE+0x5c>
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	08 97       	sbiw	r24, 0x08	; 8
    1894:	09 f0       	breq	.+2      	; 0x1898 <Endpoint_Write_Control_Stream_LE+0x7e>
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189c:	8e 77       	andi	r24, 0x7E	; 126
    189e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18a2:	ce cf       	rjmp	.-100    	; 0x1840 <Endpoint_Write_Control_Stream_LE+0x26>
    18a4:	21 11       	cpse	r18, r1
    18a6:	cf cf       	rjmp	.-98     	; 0x1846 <Endpoint_Write_Control_Stream_LE+0x2c>
    18a8:	0a c0       	rjmp	.+20     	; 0x18be <Endpoint_Write_Control_Stream_LE+0xa4>
    18aa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    18ae:	88 23       	and	r24, r24
    18b0:	61 f0       	breq	.+24     	; 0x18ca <Endpoint_Write_Control_Stream_LE+0xb0>
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	61 f0       	breq	.+24     	; 0x18ce <Endpoint_Write_Control_Stream_LE+0xb4>
    18b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ba:	83 fd       	sbrc	r24, 3
    18bc:	0a c0       	rjmp	.+20     	; 0x18d2 <Endpoint_Write_Control_Stream_LE+0xb8>
    18be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18c2:	82 ff       	sbrs	r24, 2
    18c4:	f2 cf       	rjmp	.-28     	; 0x18aa <Endpoint_Write_Control_Stream_LE+0x90>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	08 95       	ret
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	08 95       	ret
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	08 95       	ret

000018d6 <Endpoint_Write_Control_PStream_LE>:
    18d6:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x6>
    18da:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <USB_ControlRequest+0x7>
    18de:	26 17       	cp	r18, r22
    18e0:	37 07       	cpc	r19, r23
    18e2:	48 f0       	brcs	.+18     	; 0x18f6 <Endpoint_Write_Control_PStream_LE+0x20>
    18e4:	61 15       	cp	r22, r1
    18e6:	71 05       	cpc	r23, r1
    18e8:	39 f4       	brne	.+14     	; 0x18f8 <Endpoint_Write_Control_PStream_LE+0x22>
    18ea:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ee:	2e 77       	andi	r18, 0x7E	; 126
    18f0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <Endpoint_Write_Control_PStream_LE+0x22>
    18f6:	b9 01       	movw	r22, r18
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	61 15       	cp	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	91 f1       	breq	.+100    	; 0x1966 <Endpoint_Write_Control_PStream_LE+0x90>
    1902:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    1906:	88 23       	and	r24, r24
    1908:	09 f4       	brne	.+2      	; 0x190c <Endpoint_Write_Control_PStream_LE+0x36>
    190a:	40 c0       	rjmp	.+128    	; 0x198c <Endpoint_Write_Control_PStream_LE+0xb6>
    190c:	85 30       	cpi	r24, 0x05	; 5
    190e:	09 f4       	brne	.+2      	; 0x1912 <Endpoint_Write_Control_PStream_LE+0x3c>
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <Endpoint_Write_Control_PStream_LE+0xba>
    1912:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1916:	83 fd       	sbrc	r24, 3
    1918:	3d c0       	rjmp	.+122    	; 0x1994 <Endpoint_Write_Control_PStream_LE+0xbe>
    191a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    191e:	82 fd       	sbrc	r24, 2
    1920:	2f c0       	rjmp	.+94     	; 0x1980 <Endpoint_Write_Control_PStream_LE+0xaa>
    1922:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1926:	80 ff       	sbrs	r24, 0
    1928:	e9 cf       	rjmp	.-46     	; 0x18fc <Endpoint_Write_Control_PStream_LE+0x26>
    192a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    192e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	92 2b       	or	r25, r18
    1936:	61 15       	cp	r22, r1
    1938:	71 05       	cpc	r23, r1
    193a:	59 f0       	breq	.+22     	; 0x1952 <Endpoint_Write_Control_PStream_LE+0x7c>
    193c:	88 30       	cpi	r24, 0x08	; 8
    193e:	91 05       	cpc	r25, r1
    1940:	40 f4       	brcc	.+16     	; 0x1952 <Endpoint_Write_Control_PStream_LE+0x7c>
    1942:	24 91       	lpm	r18, Z
    1944:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1948:	31 96       	adiw	r30, 0x01	; 1
    194a:	61 50       	subi	r22, 0x01	; 1
    194c:	71 09       	sbc	r23, r1
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	f2 cf       	rjmp	.-28     	; 0x1936 <Endpoint_Write_Control_PStream_LE+0x60>
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	08 97       	sbiw	r24, 0x08	; 8
    1956:	09 f0       	breq	.+2      	; 0x195a <Endpoint_Write_Control_PStream_LE+0x84>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    195e:	8e 77       	andi	r24, 0x7E	; 126
    1960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1964:	cb cf       	rjmp	.-106    	; 0x18fc <Endpoint_Write_Control_PStream_LE+0x26>
    1966:	21 11       	cpse	r18, r1
    1968:	cc cf       	rjmp	.-104    	; 0x1902 <Endpoint_Write_Control_PStream_LE+0x2c>
    196a:	0a c0       	rjmp	.+20     	; 0x1980 <Endpoint_Write_Control_PStream_LE+0xaa>
    196c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    1970:	88 23       	and	r24, r24
    1972:	61 f0       	breq	.+24     	; 0x198c <Endpoint_Write_Control_PStream_LE+0xb6>
    1974:	85 30       	cpi	r24, 0x05	; 5
    1976:	61 f0       	breq	.+24     	; 0x1990 <Endpoint_Write_Control_PStream_LE+0xba>
    1978:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    197c:	83 fd       	sbrc	r24, 3
    197e:	0a c0       	rjmp	.+20     	; 0x1994 <Endpoint_Write_Control_PStream_LE+0xbe>
    1980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1984:	82 ff       	sbrs	r24, 2
    1986:	f2 cf       	rjmp	.-28     	; 0x196c <Endpoint_Write_Control_PStream_LE+0x96>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	08 95       	ret
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	08 95       	ret
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	08 95       	ret
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	08 95       	ret

00001998 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1998:	cf 92       	push	r12
    199a:	df 92       	push	r13
    199c:	ef 92       	push	r14
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19aa:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x6>
    19ae:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <USB_ControlRequest+0x7>
    19b2:	26 17       	cp	r18, r22
    19b4:	37 07       	cpc	r19, r23
    19b6:	40 f0       	brcs	.+16     	; 0x19c8 <Endpoint_Write_Control_EStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19b8:	20 97       	sbiw	r28, 0x00	; 0
    19ba:	39 f4       	brne	.+14     	; 0x19ca <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19bc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19c0:	2e 77       	andi	r18, 0x7E	; 126
    19c2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <Endpoint_Write_Control_EStream_LE+0x32>
    19c8:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    19ca:	6c 01       	movw	r12, r24
    19cc:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19ce:	20 97       	sbiw	r28, 0x00	; 0
    19d0:	d9 f1       	breq	.+118    	; 0x1a48 <Endpoint_Write_Control_EStream_LE+0xb0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19d2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19d6:	88 23       	and	r24, r24
    19d8:	09 f4       	brne	.+2      	; 0x19dc <Endpoint_Write_Control_EStream_LE+0x44>
    19da:	49 c0       	rjmp	.+146    	; 0x1a6e <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19dc:	85 30       	cpi	r24, 0x05	; 5
    19de:	09 f4       	brne	.+2      	; 0x19e2 <Endpoint_Write_Control_EStream_LE+0x4a>
    19e0:	48 c0       	rjmp	.+144    	; 0x1a72 <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19e6:	83 fd       	sbrc	r24, 3
    19e8:	46 c0       	rjmp	.+140    	; 0x1a76 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19ee:	82 fd       	sbrc	r24, 2
    19f0:	38 c0       	rjmp	.+112    	; 0x1a62 <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    19f6:	80 ff       	sbrs	r24, 0
    19f8:	ea cf       	rjmp	.-44     	; 0x19ce <Endpoint_Write_Control_EStream_LE+0x36>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19fa:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19fe:	00 91 f2 00 	lds	r16, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	18 2b       	or	r17, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1a06:	78 01       	movw	r14, r16
    1a08:	c7 01       	movw	r24, r14
    1a0a:	80 1b       	sub	r24, r16
    1a0c:	91 0b       	sbc	r25, r17
    1a0e:	8c 0d       	add	r24, r12
    1a10:	9d 1d       	adc	r25, r13

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a12:	20 97       	sbiw	r28, 0x00	; 0
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <Endpoint_Write_Control_EStream_LE+0x96>
    1a16:	38 e0       	ldi	r19, 0x08	; 8
    1a18:	e3 16       	cp	r14, r19
    1a1a:	f1 04       	cpc	r15, r1
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <Endpoint_Write_Control_EStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a1e:	a8 d3       	rcall	.+1872   	; 0x2170 <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a20:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1a24:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	e2 1a       	sub	r14, r18
    1a2a:	f2 0a       	sbc	r15, r18
    1a2c:	ed cf       	rjmp	.-38     	; 0x1a08 <Endpoint_Write_Control_EStream_LE+0x70>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	38 e0       	ldi	r19, 0x08	; 8
    1a32:	e3 16       	cp	r14, r19
    1a34:	f1 04       	cpc	r15, r1
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <Endpoint_Write_Control_EStream_LE+0xa2>
    1a38:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a3a:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a3e:	3e 77       	andi	r19, 0x7E	; 126
    1a40:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a44:	6c 01       	movw	r12, r24
    1a46:	c3 cf       	rjmp	.-122    	; 0x19ce <Endpoint_Write_Control_EStream_LE+0x36>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a48:	21 11       	cpse	r18, r1
    1a4a:	c3 cf       	rjmp	.-122    	; 0x19d2 <Endpoint_Write_Control_EStream_LE+0x3a>
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <Endpoint_Write_Control_EStream_LE+0xca>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a4e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a52:	88 23       	and	r24, r24
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a56:	85 30       	cpi	r24, 0x05	; 5
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a5e:	83 fd       	sbrc	r24, 3
    1a60:	0a c0       	rjmp	.+20     	; 0x1a76 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a66:	82 ff       	sbrs	r24, 2
    1a68:	f2 cf       	rjmp	.-28     	; 0x1a4e <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <Endpoint_Write_Control_EStream_LE+0xe0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	08 95       	ret

00001a8a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	97 30       	cpi	r25, 0x07	; 7
    1a8e:	68 f5       	brcc	.+90     	; 0x1aea <Endpoint_ConfigureEndpoint_Prv+0x60>
    1a90:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a94:	98 17       	cp	r25, r24
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1a98:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a9c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1aa0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <Endpoint_ConfigureEndpoint_Prv+0x22>
    1aa6:	24 2f       	mov	r18, r20
    1aa8:	76 2f       	mov	r23, r22
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	21 fd       	sbrc	r18, 1
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1ab0:	9f 5f       	subi	r25, 0xFF	; 255
    1ab2:	ec cf       	rjmp	.-40     	; 0x1a8c <Endpoint_ConfigureEndpoint_Prv+0x2>
    1ab4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ab8:	3e 7f       	andi	r19, 0xFE	; 254
    1aba:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1abe:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ac2:	3d 7f       	andi	r19, 0xFD	; 253
    1ac4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ac8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1acc:	31 60       	ori	r19, 0x01	; 1
    1ace:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ad2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1ad6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ada:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ade:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1ae2:	27 fd       	sbrc	r18, 7
    1ae4:	e5 cf       	rjmp	.-54     	; 0x1ab0 <Endpoint_ConfigureEndpoint_Prv+0x26>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	08 95       	ret

00001af4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1af4:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>
    1af8:	87 ff       	sbrs	r24, 7
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1afc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1b00:	82 fd       	sbrc	r24, 2
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b04:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	f8 cf       	rjmp	.-16     	; 0x1afc <Endpoint_ClearStatusStage+0x8>
    1b0c:	11 c0       	rjmp	.+34     	; 0x1b30 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b12:	8b 77       	andi	r24, 0x7B	; 123
    1b14:	0b c0       	rjmp	.+22     	; 0x1b2c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b16:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    1b1a:	88 23       	and	r24, r24
    1b1c:	49 f0       	breq	.+18     	; 0x1b30 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b22:	80 ff       	sbrs	r24, 0
    1b24:	f8 cf       	rjmp	.-16     	; 0x1b16 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b2a:	8e 77       	andi	r24, 0x7E	; 126
    1b2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b30:	08 95       	ret

00001b32 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b32:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b36:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1b3a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b3c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1b40:	84 2f       	mov	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	40 ff       	sbrs	r20, 0
    1b46:	23 c0       	rjmp	.+70     	; 0x1b8e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b4c:	80 fd       	sbrc	r24, 0
    1b4e:	1d c0       	rjmp	.+58     	; 0x1b8a <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b50:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b54:	88 23       	and	r24, r24
    1b56:	99 f0       	breq	.+38     	; 0x1b7e <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b58:	85 30       	cpi	r24, 0x05	; 5
    1b5a:	99 f0       	breq	.+38     	; 0x1b82 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b5c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b60:	85 fd       	sbrc	r24, 5
    1b62:	11 c0       	rjmp	.+34     	; 0x1b86 <Endpoint_WaitUntilReady+0x54>
    1b64:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b68:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b6c:	24 17       	cp	r18, r20
    1b6e:	35 07       	cpc	r19, r21
    1b70:	29 f3       	breq	.-54     	; 0x1b3c <Endpoint_WaitUntilReady+0xa>
    1b72:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b74:	11 f0       	breq	.+4      	; 0x1b7a <Endpoint_WaitUntilReady+0x48>
    1b76:	9a 01       	movw	r18, r20
    1b78:	e1 cf       	rjmp	.-62     	; 0x1b3c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b8e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b92:	42 ff       	sbrs	r20, 2
    1b94:	dd cf       	rjmp	.-70     	; 0x1b50 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b96:	08 95       	ret

00001b98 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b98:	67 d0       	rcall	.+206    	; 0x1c68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b9a:	6e d0       	rcall	.+220    	; 0x1c78 <USB_INT_ClearAllInterrupts>
    1b9c:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 60       	ori	r24, 0x01	; 1
    1ba4:	80 83       	st	Z, r24
    1ba6:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8f 77       	andi	r24, 0x7F	; 127
    1bae:	80 83       	st	Z, r24
    1bb0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bb2:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	8c 91       	ld	r24, X
    1bb8:	8e 7f       	andi	r24, 0xFE	; 254
    1bba:	8c 93       	st	X, r24
    1bbc:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1bbe:	8f 7e       	andi	r24, 0xEF	; 239
    1bc0:	80 83       	st	Z, r24
    1bc2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1bc6:	08 95       	ret

00001bc8 <USB_ResetInterface>:
    1bc8:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bd0:	4b d0       	rcall	.+150    	; 0x1c68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bd2:	52 d0       	rcall	.+164    	; 0x1c78 <USB_INT_ClearAllInterrupts>
    1bd4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bd6:	d0 e0       	ldi	r29, 0x00	; 0
    1bd8:	88 81       	ld	r24, Y
    1bda:	8f 77       	andi	r24, 0x7F	; 127
    1bdc:	88 83       	st	Y, r24
    1bde:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1be0:	80 68       	ori	r24, 0x80	; 128
    1be2:	88 83       	st	Y, r24
    1be4:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1be6:	8f 7d       	andi	r24, 0xDF	; 223
    1be8:	88 83       	st	Y, r24
    1bea:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bec:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bf0:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1bf4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bf8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bfc:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	f8 01       	movw	r30, r16
    1c02:	80 81       	ld	r24, Z
    1c04:	8b 7f       	andi	r24, 0xFB	; 251
    1c06:	80 83       	st	Z, r24
    1c08:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	88 83       	st	Y, r24
    1c0e:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	3a df       	rcall	.-396    	; 0x1a8a <Endpoint_ConfigureEndpoint_Prv>
    1c16:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8e 7f       	andi	r24, 0xFE	; 254
    1c1e:	80 83       	st	Z, r24
    1c20:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	80 83       	st	Z, r24
    1c2a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c2c:	88 60       	ori	r24, 0x08	; 8
    1c2e:	80 83       	st	Z, r24
    1c30:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c32:	80 81       	ld	r24, Z
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	80 83       	st	Z, r24
    1c38:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c3a:	80 61       	ori	r24, 0x10	; 16
    1c3c:	88 83       	st	Y, r24
    1c3e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <USB_Init>:
    1c48:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7e       	andi	r24, 0xEF	; 239
    1c50:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c52:	e7 ed       	ldi	r30, 0xD7	; 215
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <USB_IsInitialized>

	USB_ResetInterface();
    1c66:	b0 cf       	rjmp	.-160    	; 0x1bc8 <USB_ResetInterface>

00001c68 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c68:	e8 ed       	ldi	r30, 0xD8	; 216
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c72:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c76:	08 95       	ret

00001c78 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c78:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c7c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c80:	08 95       	ret

00001c82 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ca4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ca8:	82 ff       	sbrs	r24, 2
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1cac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cb0:	82 ff       	sbrs	r24, 2
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1cb4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1cb8:	8b 7f       	andi	r24, 0xFB	; 251
    1cba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1cbe:	28 d2       	rcall	.+1104   	; 0x2110 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1cc0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1cc4:	80 ff       	sbrs	r24, 0
    1cc6:	1f c0       	rjmp	.+62     	; 0x1d06 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cc8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1ccc:	80 ff       	sbrs	r24, 0
    1cce:	1b c0       	rjmp	.+54     	; 0x1d06 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cd0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1cd4:	8e 7f       	andi	r24, 0xFE	; 254
    1cd6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1cda:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1cde:	80 ff       	sbrs	r24, 0
    1ce0:	0d c0       	rjmp	.+26     	; 0x1cfc <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ce2:	80 e1       	ldi	r24, 0x10	; 16
    1ce4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ce6:	82 e1       	ldi	r24, 0x12	; 18
    1ce8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cea:	09 b4       	in	r0, 0x29	; 41
    1cec:	00 fe       	sbrs	r0, 0
    1cee:	fd cf       	rjmp	.-6      	; 0x1cea <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1cf6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <EVENT_USB_Device_Connect>
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cfc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cfe:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1d02:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d06:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d0a:	80 ff       	sbrs	r24, 0
    1d0c:	18 c0       	rjmp	.+48     	; 0x1d3e <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d0e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d12:	80 ff       	sbrs	r24, 0
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d1a:	8e 7f       	andi	r24, 0xFE	; 254
    1d1c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d20:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d24:	80 61       	ori	r24, 0x10	; 16
    1d26:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d2a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d2e:	80 62       	ori	r24, 0x20	; 32
    1d30:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d34:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d36:	85 e0       	ldi	r24, 0x05	; 5
    1d38:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1d3c:	e9 d1       	rcall	.+978    	; 0x2110 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d42:	84 ff       	sbrs	r24, 4
    1d44:	2f c0       	rjmp	.+94     	; 0x1da4 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d4a:	84 ff       	sbrs	r24, 4
    1d4c:	2b c0       	rjmp	.+86     	; 0x1da4 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d4e:	80 e1       	ldi	r24, 0x10	; 16
    1d50:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d52:	82 e1       	ldi	r24, 0x12	; 18
    1d54:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d56:	09 b4       	in	r0, 0x29	; 41
    1d58:	00 fe       	sbrs	r0, 0
    1d5a:	fd cf       	rjmp	.-6      	; 0x1d56 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d5c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d60:	8f 7d       	andi	r24, 0xDF	; 223
    1d62:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d66:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d6a:	8f 7e       	andi	r24, 0xEF	; 239
    1d6c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d70:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d74:	8f 7e       	andi	r24, 0xEF	; 239
    1d76:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d84:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <USB_Device_ConfigurationNumber>
    1d88:	88 23       	and	r24, r24
    1d8a:	11 f0       	breq	.+4      	; 0x1d90 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	07 c0       	rjmp	.+14     	; 0x1d9e <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d90:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d94:	87 fd       	sbrc	r24, 7
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <__vector_10+0x11a>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <__vector_10+0x11c>
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
    1d9e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1da2:	b6 d1       	rcall	.+876    	; 0x2110 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1da4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1da8:	83 ff       	sbrs	r24, 3
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1dac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1db0:	83 ff       	sbrs	r24, 3
    1db2:	23 c0       	rjmp	.+70     	; 0x1dfa <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1db4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1db8:	87 7f       	andi	r24, 0xF7	; 247
    1dba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1dc4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dc8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1dcc:	8e 7f       	andi	r24, 0xFE	; 254
    1dce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1dd2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dd6:	8e 7f       	andi	r24, 0xFE	; 254
    1dd8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ddc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1de0:	80 61       	ori	r24, 0x10	; 16
    1de2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1de6:	42 e0       	ldi	r20, 0x02	; 2
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	4e de       	rcall	.-868    	; 0x1a8a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1dee:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1df2:	88 60       	ori	r24, 0x08	; 8
    1df4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1df8:	8b d1       	rcall	.+790    	; 0x2110 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1dfa:	ff 91       	pop	r31
    1dfc:	ef 91       	pop	r30
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	7f 91       	pop	r23
    1e08:	6f 91       	pop	r22
    1e0a:	5f 91       	pop	r21
    1e0c:	4f 91       	pop	r20
    1e0e:	3f 91       	pop	r19
    1e10:	2f 91       	pop	r18
    1e12:	0f 90       	pop	r0
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	0f 90       	pop	r0
    1e18:	1f 90       	pop	r1
    1e1a:	18 95       	reti

00001e1c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e1c:	1f 92       	push	r1
    1e1e:	0f 92       	push	r0
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	0f 92       	push	r0
    1e24:	11 24       	eor	r1, r1
    1e26:	2f 93       	push	r18
    1e28:	3f 93       	push	r19
    1e2a:	4f 93       	push	r20
    1e2c:	5f 93       	push	r21
    1e2e:	6f 93       	push	r22
    1e30:	7f 93       	push	r23
    1e32:	8f 93       	push	r24
    1e34:	9f 93       	push	r25
    1e36:	af 93       	push	r26
    1e38:	bf 93       	push	r27
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e42:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1e46:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e48:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1e4c:	d8 2f       	mov	r29, r24
    1e4e:	d1 70       	andi	r29, 0x01	; 1
    1e50:	80 fd       	sbrc	r24, 0
    1e52:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e54:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e58:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e5c:	87 7f       	andi	r24, 0xF7	; 247
    1e5e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e62:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e64:	1e d0       	rcall	.+60     	; 0x1ea2 <USB_Device_ProcessControlRequest>
    1e66:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e6a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e6e:	88 60       	ori	r24, 0x08	; 8
    1e70:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e74:	cd 2b       	or	r28, r29
    1e76:	cf 70       	andi	r28, 0x0F	; 15
    1e78:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	0f 90       	pop	r0
    1e9e:	1f 90       	pop	r1
    1ea0:	18 95       	reti

00001ea2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <USB_Device_ProcessControlRequest+0x8>
    1eaa:	1f 92       	push	r1
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	e3 ee       	ldi	r30, 0xE3	; 227
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	8b ee       	ldi	r24, 0xEB	; 235
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1eb8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ebc:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ebe:	8e 17       	cp	r24, r30
    1ec0:	9f 07       	cpc	r25, r31
    1ec2:	d1 f7       	brne	.-12     	; 0x1eb8 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1ec4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1ecc:	83 ff       	sbrs	r24, 3
    1ece:	0b c1       	rjmp	.+534    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1ed0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1ed4:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <USB_ControlRequest+0x1>
    1ed8:	95 30       	cpi	r25, 0x05	; 5
    1eda:	09 f4       	brne	.+2      	; 0x1ede <USB_Device_ProcessControlRequest+0x3c>
    1edc:	83 c0       	rjmp	.+262    	; 0x1fe4 <USB_Device_ProcessControlRequest+0x142>
    1ede:	30 f4       	brcc	.+12     	; 0x1eec <USB_Device_ProcessControlRequest+0x4a>
    1ee0:	91 30       	cpi	r25, 0x01	; 1
    1ee2:	a9 f1       	breq	.+106    	; 0x1f4e <USB_Device_ProcessControlRequest+0xac>
    1ee4:	68 f0       	brcs	.+26     	; 0x1f00 <USB_Device_ProcessControlRequest+0x5e>
    1ee6:	93 30       	cpi	r25, 0x03	; 3
    1ee8:	91 f1       	breq	.+100    	; 0x1f4e <USB_Device_ProcessControlRequest+0xac>
    1eea:	fd c0       	rjmp	.+506    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
    1eec:	98 30       	cpi	r25, 0x08	; 8
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <USB_Device_ProcessControlRequest+0x50>
    1ef0:	c9 c0       	rjmp	.+402    	; 0x2084 <USB_Device_ProcessControlRequest+0x1e2>
    1ef2:	99 30       	cpi	r25, 0x09	; 9
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <USB_Device_ProcessControlRequest+0x56>
    1ef6:	d5 c0       	rjmp	.+426    	; 0x20a2 <USB_Device_ProcessControlRequest+0x200>
    1ef8:	96 30       	cpi	r25, 0x06	; 6
    1efa:	09 f0       	breq	.+2      	; 0x1efe <USB_Device_ProcessControlRequest+0x5c>
    1efc:	f4 c0       	rjmp	.+488    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
    1efe:	94 c0       	rjmp	.+296    	; 0x2028 <USB_Device_ProcessControlRequest+0x186>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f00:	80 38       	cpi	r24, 0x80	; 128
    1f02:	21 f0       	breq	.+8      	; 0x1f0c <USB_Device_ProcessControlRequest+0x6a>
    1f04:	82 38       	cpi	r24, 0x82	; 130
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <USB_Device_ProcessControlRequest+0x68>
    1f08:	ee c0       	rjmp	.+476    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
    1f0a:	08 c0       	rjmp	.+16     	; 0x1f1c <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f0c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f10:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <USB_Device_RemoteWakeupEnabled>
    1f14:	99 23       	and	r25, r25
    1f16:	89 f0       	breq	.+34     	; 0x1f3a <USB_Device_ProcessControlRequest+0x98>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <USB_Device_ProcessControlRequest+0x98>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f1c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x4>
    1f20:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f22:	87 30       	cpi	r24, 0x07	; 7
    1f24:	08 f0       	brcs	.+2      	; 0x1f28 <USB_Device_ProcessControlRequest+0x86>
    1f26:	df c0       	rjmp	.+446    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f28:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1f30:	85 fb       	bst	r24, 5
    1f32:	88 27       	eor	r24, r24
    1f34:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f3a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f3e:	97 7f       	andi	r25, 0xF7	; 247
    1f40:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1f48:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1f4c:	a6 c0       	rjmp	.+332    	; 0x209a <USB_Device_ProcessControlRequest+0x1f8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f4e:	28 2f       	mov	r18, r24
    1f50:	2d 7f       	andi	r18, 0xFD	; 253
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <USB_Device_ProcessControlRequest+0xb4>
    1f54:	c8 c0       	rjmp	.+400    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f56:	88 23       	and	r24, r24
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <USB_Device_ProcessControlRequest+0xbe>
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	61 f0       	breq	.+24     	; 0x1f76 <USB_Device_ProcessControlRequest+0xd4>
    1f5e:	c3 c0       	rjmp	.+390    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f60:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <USB_Device_ProcessControlRequest+0xc8>
    1f68:	be c0       	rjmp	.+380    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f6a:	93 30       	cpi	r25, 0x03	; 3
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <USB_Device_ProcessControlRequest+0xce>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <USB_Device_RemoteWakeupEnabled>
    1f74:	2e c0       	rjmp	.+92     	; 0x1fd2 <USB_Device_ProcessControlRequest+0x130>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f76:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	2a c0       	rjmp	.+84     	; 0x1fd2 <USB_Device_ProcessControlRequest+0x130>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f7e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x4>
    1f82:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f84:	2f ef       	ldi	r18, 0xFF	; 255
    1f86:	28 0f       	add	r18, r24
    1f88:	26 30       	cpi	r18, 0x06	; 6
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <USB_Device_ProcessControlRequest+0xec>
    1f8c:	ac c0       	rjmp	.+344    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f92:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f96:	20 ff       	sbrs	r18, 0
    1f98:	1c c0       	rjmp	.+56     	; 0x1fd2 <USB_Device_ProcessControlRequest+0x130>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f9a:	93 30       	cpi	r25, 0x03	; 3
    1f9c:	21 f4       	brne	.+8      	; 0x1fa6 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f9e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fa2:	80 62       	ori	r24, 0x20	; 32
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <USB_Device_ProcessControlRequest+0x12c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fa6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1faa:	90 61       	ori	r25, 0x10	; 16
    1fac:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fb0:	21 e0       	ldi	r18, 0x01	; 1
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <USB_Device_ProcessControlRequest+0x11a>
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	8a 95       	dec	r24
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <USB_Device_ProcessControlRequest+0x116>
    1fc0:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1fc4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fc8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fcc:	88 60       	ori	r24, 0x08	; 8
    1fce:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fe0:	89 dd       	rcall	.-1262   	; 0x1af4 <Endpoint_ClearStatusStage>
    1fe2:	81 c0       	rjmp	.+258    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	7f c0       	rjmp	.+254    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fe8:	10 91 e5 01 	lds	r17, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    1fec:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ff2:	80 78       	andi	r24, 0x80	; 128
    1ff4:	81 2b       	or	r24, r17
    1ff6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ffa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ffe:	87 7f       	andi	r24, 0xF7	; 247
    2000:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2004:	77 dd       	rcall	.-1298   	; 0x1af4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2006:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    200a:	80 ff       	sbrs	r24, 0
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <USB_Device_ProcessControlRequest+0x164>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    200e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2012:	80 68       	ori	r24, 0x80	; 128
    2014:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2018:	11 11       	cpse	r17, r1
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <USB_Device_ProcessControlRequest+0x17e>
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <USB_Device_ProcessControlRequest+0x180>
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>
    2026:	5f c0       	rjmp	.+190    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2028:	80 58       	subi	r24, 0x80	; 128
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	08 f0       	brcs	.+2      	; 0x2030 <USB_Device_ProcessControlRequest+0x18e>
    202e:	5b c0       	rjmp	.+182    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2030:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x4>
    2034:	70 91 e8 01 	lds	r23, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x5>
    2038:	9e 01       	movw	r18, r28
    203a:	2d 5f       	subi	r18, 0xFD	; 253
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	ae 01       	movw	r20, r28
    2040:	4f 5f       	subi	r20, 0xFF	; 255
    2042:	5f 4f       	sbci	r21, 0xFF	; 255
    2044:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    2048:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x3>
    204c:	c2 d8       	rcall	.-3708   	; 0x11d2 <CALLBACK_USB_GetDescriptor>
    204e:	bc 01       	movw	r22, r24
    2050:	89 2b       	or	r24, r25
    2052:	09 f4       	brne	.+2      	; 0x2056 <USB_Device_ProcessControlRequest+0x1b4>
    2054:	48 c0       	rjmp	.+144    	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2056:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    205a:	87 7f       	andi	r24, 0xF7	; 247
    205c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	21 11       	cpse	r18, r1
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2068:	02 c0       	rjmp	.+4      	; 0x206e <USB_Device_ProcessControlRequest+0x1cc>
    206a:	35 dc       	rcall	.-1942   	; 0x18d6 <Endpoint_Write_Control_PStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <USB_Device_ProcessControlRequest+0x1d6>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    206e:	21 30       	cpi	r18, 0x01	; 1
    2070:	11 f4       	brne	.+4      	; 0x2076 <USB_Device_ProcessControlRequest+0x1d4>
    2072:	92 dc       	rcall	.-1756   	; 0x1998 <Endpoint_Write_Control_EStream_LE>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <USB_Device_ProcessControlRequest+0x1d6>
    2076:	d1 db       	rcall	.-2142   	; 0x181a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2078:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    207c:	8b 77       	andi	r24, 0x7B	; 123
    207e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2082:	31 c0       	rjmp	.+98     	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2084:	80 38       	cpi	r24, 0x80	; 128
    2086:	79 f5       	brne	.+94     	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2088:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    208c:	87 7f       	andi	r24, 0xF7	; 247
    208e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2092:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2096:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    209a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    209e:	8e 77       	andi	r24, 0x7E	; 126
    20a0:	9d cf       	rjmp	.-198    	; 0x1fdc <USB_Device_ProcessControlRequest+0x13a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20a2:	81 11       	cpse	r24, r1
    20a4:	20 c0       	rjmp	.+64     	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20a6:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    20aa:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x3>
    20ae:	99 27       	eor	r25, r25
    20b0:	02 97       	sbiw	r24, 0x02	; 2
    20b2:	cc f4       	brge	.+50     	; 0x20e6 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20b8:	87 7f       	andi	r24, 0xF7	; 247
    20ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20be:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest+0x2>
    20c2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    20c6:	16 dd       	rcall	.-1492   	; 0x1af4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20c8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <USB_Device_ConfigurationNumber>
    20cc:	81 11       	cpse	r24, r1
    20ce:	06 c0       	rjmp	.+12     	; 0x20dc <USB_Device_ProcessControlRequest+0x23a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20d0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20d4:	87 fd       	sbrc	r24, 7
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <USB_Device_ProcessControlRequest+0x23a>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	01 c0       	rjmp	.+2      	; 0x20de <USB_Device_ProcessControlRequest+0x23c>
    20dc:	84 e0       	ldi	r24, 0x04	; 4
    20de:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    20e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20ea:	83 ff       	sbrs	r24, 3
    20ec:	0a c0       	rjmp	.+20     	; 0x2102 <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20f2:	87 7f       	andi	r24, 0xF7	; 247
    20f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    20fc:	80 62       	ori	r24, 0x20	; 32
    20fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	08 95       	ret

00002110 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2110:	08 95       	ret

00002112 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2112:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2114:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <USB_DeviceState>
    2118:	88 23       	and	r24, r24
    211a:	99 f0       	breq	.+38     	; 0x2142 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    211c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2120:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2122:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2126:	89 2f       	mov	r24, r25
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	90 fd       	sbrc	r25, 0
    212c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    212e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2130:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2134:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2138:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    213a:	b3 de       	rcall	.-666    	; 0x1ea2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    213c:	cf 70       	andi	r28, 0x0F	; 15
    213e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2142:	cf 91       	pop	r28
    2144:	08 95       	ret

00002146 <__udivmodqi4>:
    2146:	99 1b       	sub	r25, r25
    2148:	79 e0       	ldi	r23, 0x09	; 9
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <__udivmodqi4_ep>

0000214c <__udivmodqi4_loop>:
    214c:	99 1f       	adc	r25, r25
    214e:	96 17       	cp	r25, r22
    2150:	08 f0       	brcs	.+2      	; 0x2154 <__udivmodqi4_ep>
    2152:	96 1b       	sub	r25, r22

00002154 <__udivmodqi4_ep>:
    2154:	88 1f       	adc	r24, r24
    2156:	7a 95       	dec	r23
    2158:	c9 f7       	brne	.-14     	; 0x214c <__udivmodqi4_loop>
    215a:	80 95       	com	r24
    215c:	08 95       	ret

0000215e <memcpy>:
    215e:	fb 01       	movw	r30, r22
    2160:	dc 01       	movw	r26, r24
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <memcpy+0xa>
    2164:	01 90       	ld	r0, Z+
    2166:	0d 92       	st	X+, r0
    2168:	41 50       	subi	r20, 0x01	; 1
    216a:	50 40       	sbci	r21, 0x00	; 0
    216c:	d8 f7       	brcc	.-10     	; 0x2164 <memcpy+0x6>
    216e:	08 95       	ret

00002170 <eeprom_read_byte>:
    2170:	f9 99       	sbic	0x1f, 1	; 31
    2172:	fe cf       	rjmp	.-4      	; 0x2170 <eeprom_read_byte>
    2174:	92 bd       	out	0x22, r25	; 34
    2176:	81 bd       	out	0x21, r24	; 33
    2178:	f8 9a       	sbi	0x1f, 0	; 31
    217a:	99 27       	eor	r25, r25
    217c:	80 b5       	in	r24, 0x20	; 32
    217e:	08 95       	ret

00002180 <eeprom_write_byte>:
    2180:	26 2f       	mov	r18, r22

00002182 <eeprom_write_r18>:
    2182:	f9 99       	sbic	0x1f, 1	; 31
    2184:	fe cf       	rjmp	.-4      	; 0x2182 <eeprom_write_r18>
    2186:	1f ba       	out	0x1f, r1	; 31
    2188:	92 bd       	out	0x22, r25	; 34
    218a:	81 bd       	out	0x21, r24	; 33
    218c:	20 bd       	out	0x20, r18	; 32
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	fa 9a       	sbi	0x1f, 2	; 31
    2194:	f9 9a       	sbi	0x1f, 1	; 31
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	08 95       	ret

0000219c <_exit>:
    219c:	f8 94       	cli

0000219e <__stop_program>:
    219e:	ff cf       	rjmp	.-2      	; 0x219e <__stop_program>
